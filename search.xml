<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/01/07/hello-world/"/>
      <url>/2024/01/07/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java微服务项目谷粒商城-商品服务</title>
      <link href="/2021/06/27/Java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%95%86%E5%93%81%E6%9C%8D%E5%8A%A1/"/>
      <url>/2021/06/27/Java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%95%86%E5%93%81%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="三级分类"><a href="#三级分类" class="headerlink" title="三级分类"></a>三级分类</h2><h3 id="查询分级菜单"><a href="#查询分级菜单" class="headerlink" title="查询分级菜单"></a>查询分级菜单</h3><h4 id="导入分类信息"><a href="#导入分类信息" class="headerlink" title="导入分类信息"></a>导入分类信息</h4><p>在数据库<code>electricity_pms</code>的<code>pms_category</code>表中插入商品分类数据。直接将 sql 文件<code>pms_catelog.sql</code>数据导入数据库。</p><h4 id="Controller-层"><a href="#Controller-层" class="headerlink" title="Controller 层"></a>Controller 层</h4><p>在<code>CategoryController</code>类中编写方法调用 service 层方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询树形列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/list/tree&quot;)</span></span><br><span class="line"><span class="comment">//@RequiresPermissions(&quot;product:category:list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">list</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, Object&gt; params)</span>&#123;</span><br><span class="line">    List&lt;CategoryEntity&gt; entities = categoryService.listWithTree();</span><br><span class="line">    <span class="keyword">return</span> R.ok().put(<span class="string">&quot;data&quot;</span>, entities);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h4><p>在<code>CategoryService</code>接口中编写 listWithTree 方法，并在<code>CategoryServiceImpl</code>类中实现该方法，调用 dao 层获取分级的分类信息。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按照树形等级查询所有分类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">listWithTree</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有分类</span></span><br><span class="line">    List&lt;CategoryEntity&gt; entities = baseMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 组装成父子关系的树形结构</span></span><br><span class="line">    List&lt;CategoryEntity&gt; menus = entities.stream().filter((categoryEntity) -&gt;</span><br><span class="line">                                                          <span class="comment">// 过滤出一级列表</span></span><br><span class="line">                                                          categoryEntity.getParentCid() == <span class="number">0</span></span><br><span class="line">                                                         ).map((menu) -&gt; &#123;</span><br><span class="line">        <span class="comment">// 设置子分类</span></span><br><span class="line">        menu.setChildren(getChildren(menu, entities));</span><br><span class="line">        <span class="keyword">return</span> menu;</span><br><span class="line">    &#125;).sorted((menu1, menu2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> (menu1.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu1.getSort()) - (menu2.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu2.getSort());</span><br><span class="line">    &#125;).collect(Collectors.toList());<span class="comment">// 收集成List</span></span><br><span class="line">    <span class="keyword">return</span> menus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归获取子分类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root 当前分类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> all 所有分类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 子分类集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;CategoryEntity&gt; <span class="title function_">getChildren</span><span class="params">(CategoryEntity root, List&lt;CategoryEntity&gt; all)</span> &#123;</span><br><span class="line">    List&lt;CategoryEntity&gt; children = all.stream().filter(categoryEntity -&gt; &#123;</span><br><span class="line">        <span class="comment">// 要查询的分类的父分类ID等于当前分类的ID，表明要查询的分类是当前分类的子分类</span></span><br><span class="line">        <span class="keyword">return</span> categoryEntity.getParentCid().equals(root.getCatId());</span><br><span class="line">    &#125;).map(categoryEntity -&gt; &#123;</span><br><span class="line">        <span class="comment">// 递归查询子分类</span></span><br><span class="line">        categoryEntity.setChildren(getChildren(categoryEntity, all));</span><br><span class="line">        <span class="keyword">return</span> categoryEntity;</span><br><span class="line">    &#125;).sorted((menu1, menu2) -&gt; &#123;</span><br><span class="line">        <span class="comment">// 分类的排序</span></span><br><span class="line">        <span class="keyword">return</span> (menu1.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu1.getSort()) - (menu2.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu2.getSort());</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在递归获取子分类信息时，需要一个字段保存子分类信息，该字段数据库中没有。需要在<code>CategoryEntity</code>类添加字段。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子分类，不是数据库的字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;CategoryEntity&gt; children;</span><br></pre></td></tr></table></figure><h3 id="配置网关路由"><a href="#配置网关路由" class="headerlink" title="配置网关路由"></a>配置网关路由</h3><h4 id="新建分类信息前端页面"><a href="#新建分类信息前端页面" class="headerlink" title="新建分类信息前端页面"></a>新建分类信息前端页面</h4><p>启动<code>renren-fast</code>后台项目和<code>renren-fast-vue</code>前端项目，在前端页面系统管理中，选择菜单管理，然后新建目录商品管理，在该目录下再新建分类维护菜单，菜单 url 为<code>product/category</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法-约瑟夫环</title>
      <link href="/2021/06/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/"/>
      <url>/2021/06/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info flat"><p>无论是单链表还是双链表都只能从头结点开始往后遍历，这样处理有些问题就不太方便，环形链表可以很好的解决这个问题。环形链表的尾结点指针不再为空，而是指向了头结点，这样的话任意一个结点都是头结点，也就是说可以从任意一个结点开始遍历。</p></div>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
            <tag> 循环链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java微服务项目谷粒商城-分布式组件SpringCloud</title>
      <link href="/2021/06/19/Java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%88%86%E5%B8%83%E5%BC%8F%E7%BB%84%E4%BB%B6SpringCloud/"/>
      <url>/2021/06/19/Java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%88%86%E5%B8%83%E5%BC%8F%E7%BB%84%E4%BB%B6SpringCloud/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note success flat"><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。<br>依托 Spring Cloud Alibaba，只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p></div><h2 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h2><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul><li><strong>服务限流降级</strong>：默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li><li><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li><li><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li><li><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li><li><strong>分布式事务</strong>：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</li><li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li><li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>**<a href="https://github.com/alibaba/Sentinel">Sentinel</a>**：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p>**<a href="https://github.com/alibaba/Nacos">Nacos</a>**：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p>**<a href="https://rocketmq.apache.org/">RocketMQ</a>**：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p><p>**<a href="https://github.com/apache/dubbo">Dubbo</a>**：Apache Dubbo™ 是一款高性能 Java RPC 框架。</p><p>**<a href="https://github.com/seata/seata">Seata</a>**：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p><p><strong><a href="https://www.aliyun.com/product/oss">Alibaba Cloud OSS</a></strong>: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p><p><strong><a href="https://help.aliyun.com/document_detail/43136.html">Alibaba Cloud SchedulerX</a></strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p><p><strong><a href="https://www.aliyun.com/product/sms">Alibaba Cloud SMS</a></strong>: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>在<code>electricity-common</code>模块引入依赖。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="版本管理规范"><a href="#版本管理规范" class="headerlink" title="版本管理规范"></a>版本管理规范</h4><p>项目的版本号格式为 x.x.x 的形式，其中 x 的数值类型为数字，从 0 开始取值，且不限于 0~9 这个范围。项目处于孵化器阶段时，第一位版本号固定使用 0，即版本号为 0.x.x 的格式。</p><p>由于 Spring Boot 1 和 Spring Boot 2 在 Actuator 模块的接口和注解有很大的变更，且 spring-cloud-commons 从 1.x.x 版本升级到 2.0.0 版本也有较大的变更，因此<code>springcloud alibaba</code>采取跟<code>SpringBoot</code>版本号一致的版本：</p><ul><li>1.5.x 版本适用于 Spring Boot 1.5.x</li><li>2.0.x 版本适用于 Spring Boot 2.0.x</li><li>2.1.x 版本适用于 Spring Boot 2.1.x</li><li>2.2.x 版本适用于 Spring Boot 2.2.x</li><li>2021.x 版本适用于 Spring Boot 2.4.x</li></ul><h2 id="Nacos-Discovery"><a href="#Nacos-Discovery" class="headerlink" title="Nacos Discovery"></a>Nacos Discovery</h2><h3 id="接入-Nacos-Discovery"><a href="#接入-Nacos-Discovery" class="headerlink" title="接入 Nacos Discovery"></a>接入 Nacos Discovery</h3><ul><li>在<code>electricity-common</code>模块的 pom.xml 文件中引入<code>Nacos Discovery Starter</code>。</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在<code>electricity-coupon</code>模块的<code>application.yml</code>文件中添加 nacos 的服务地址和应用名称</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">electricity-coupon</span></span><br></pre></td></tr></table></figure><ul><li>在启动类上加入<code>@EnableDiscoveryClient</code>注解开启服务注册与发现功能</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 开启nacos服务注册与发现功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElectricityCouponApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(ElectricityCouponApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动-Nacos-Server"><a href="#启动-Nacos-Server" class="headerlink" title="启动 Nacos Server"></a>启动 Nacos Server</h3><ul><li>下载 Nacos Server</li></ul><p>在 github 上下载 <a href="https://github.com/alibaba/nacos/releases">Nacos Server</a>。</p><ul><li>启动 Nacos Server</li></ul><p>将下载好的压缩包解压出来，修改 bin 目录下的<code>start.cmd</code>文件。nacos server 配置的默认是集群启动，本机电脑上我们以单机的方式启动，所以要修改为单机模式。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 将 cluster修改为 standalone</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">MODE</span>=&quot;standalone&quot;</span><br></pre></td></tr></table></figure><p>双击<code>start.cmd</code>文件，启动 nacos server。</p><p>linux&#x2F;mac 等类 unix 系统，启动<code>start.sh</code>文件。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure><ul><li>启动电商项目</li></ul><p>启动刚才配置 nacos 的<code>electricity-coupon</code>模块。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>在浏览器输入<code>http://127.0.0.1:8848/nacos</code>，输入用户名和密码（都是nacos）进入控制台，可以看到已经注册的服务。</p><div class="note info flat"><p>配置多个服务实例时，都是按照上面的步骤进行配置。</p></div><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><p>Feign 是一个声明式的 HTTP 客户端，他的目的就是让远程调用更加简单。给远程服务发的是 HTTP 请求。</p><p>这里测试会员服务远程调用优惠券服务。</p><h3 id="引入-maven-依赖"><a href="#引入-maven-依赖" class="headerlink" title="引入 maven 依赖"></a>引入 maven 依赖</h3><p>openfeign 的依赖在创建项目时已经导入，如果没有引入，在各个微服务模块中都需要导入。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生成优惠券"><a href="#生成优惠券" class="headerlink" title="生成优惠券"></a>生成优惠券</h3><p>在<code>electricity-coupon</code>模块模拟优惠券，供会员模块调用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;coupon/coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CouponService couponService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟优惠券</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 优惠券</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/member/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">memberCoupon</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟优惠券</span></span><br><span class="line">        <span class="type">CouponEntity</span> <span class="variable">coupon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CouponEntity</span>();</span><br><span class="line">        coupon.setCouponName(<span class="string">&quot;满199减100&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;coupons&quot;</span>, Arrays.asList(coupon));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建远程调用客户端接口"><a href="#创建远程调用客户端接口" class="headerlink" title="创建远程调用客户端接口"></a>创建远程调用客户端接口</h3><p>远程调用客户端告诉 springCloud 将要调用 coupon 服务的各种模块。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;electricity-coupon&quot;)</span> <span class="comment">// 告诉 SpringCloud 这是一个远程客户端，调用 coupon 服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CouponFeignService</span> &#123;</span><br><span class="line">    <span class="comment">// 这里是直接复制优惠券服务中定义的方法签名</span></span><br><span class="line">    <span class="comment">// 会员优惠券服务</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/coupon/coupon/member/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">memberCoupon</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启远程调用服务"><a href="#开启远程调用服务" class="headerlink" title="开启远程调用服务"></a>开启远程调用服务</h3><p>在会员服务启动类上卡其远程调用服务。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.laughing.electricity.member.feign&quot;)</span> <span class="comment">// 开启远程调用服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElectricityMemberApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(ElectricityMemberApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试远程调用"><a href="#测试远程调用" class="headerlink" title="测试远程调用"></a>测试远程调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;member/member&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CouponFeignService couponFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/coupons&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MemberEntity</span> <span class="variable">memberEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberEntity</span>();</span><br><span class="line">        memberEntity.setNickname(<span class="string">&quot;杰哥不要啊&quot;</span>);</span><br><span class="line">        <span class="type">R</span> <span class="variable">memberCoupon</span> <span class="operator">=</span> couponFeignService.memberCoupon();</span><br><span class="line">        <span class="comment">// memberCoupon.get(&quot;coupons&quot;) 这里的 coupons 是 memberCoupon 返回的 coupons，要对应</span></span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;member&quot;</span>, memberEntity).put(<span class="string">&quot;coupons&quot;</span>, memberCoupon.get(<span class="string">&quot;coupons&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>如果你配置的 springboot 和 springcloud 版本比较高，启动项目时会报下面的错误。<br>No Feign Client for loadBalancing defined. Did you forget to include spring-cloud-starter-loadbalancer?</p></div><p>解决方案：将<code>electricity-common</code>模块中的 springcloud 依赖修改一下。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud Feign在Hoxton.M2 RELEASED版本之后不再使用Ribbon而是使用spring-cloud-loadbalancer--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Nacos-Config"><a href="#Nacos-Config" class="headerlink" title="Nacos Config"></a>Nacos Config</h2><h3 id="引入-maven-依赖-1"><a href="#引入-maven-依赖-1" class="headerlink" title="引入 maven 依赖"></a>引入 maven 依赖</h3><p>在<code>electricity-common</code>模块的 pom.xml 文件中引入<code>Nacos Config Starter</code>。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置-Nacos-Config-元数据"><a href="#配置-Nacos-Config-元数据" class="headerlink" title="配置 Nacos Config 元数据"></a>配置 Nacos Config 元数据</h3><p>在微服务模块中新建<code>bootstrap.properties</code>配置文件配置原数据，<code>bootstrap.properties</code>配置文件会优先于<code>application.properties</code>文件加载。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">electricity-coupon</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><h3 id="获取配置"><a href="#获取配置" class="headerlink" title="获取配置"></a>获取配置</h3><p>完成上述两步后，应用会从 <strong>Nacos Config</strong> 中获取相应的配置，并添加在 Spring Environment 的 PropertySources 中。这里我们使用 @Value 注解来将对应的配置注入到 <strong>CouponController</strong>的 userName 和 age 字段，并添加<code>@RefreshScope</code>打开动态刷新功能。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 开启nacos配置动态刷新</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;coupon/coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取配置信息</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;coupon.user.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;coupon.user.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;name&quot;</span>, name).put(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h3><p>先启动 nacos server 程序，然后启动微服务项目，在浏览器输入项目地址获取信息。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">localhost:7000/coupon/coupon/test</span><br></pre></td></tr></table></figure><h3 id="配置-Nacos-DataID-数据"><a href="#配置-Nacos-DataID-数据" class="headerlink" title="配置 Nacos DataID 数据"></a>配置 Nacos DataID 数据</h3><p>在 nacos 服务前端页面配置管理的配置列表中添加 DataID，DataID 为<code>应用名.properties</code>，选择配置格式，然后添加配置内容。</p><p>配置完成后，只需要修改这里的配置数据就可以自动获取新的数据，不需要再重新启动项目。</p><div class="note warning flat"><p>如果配置完成后，一切都正常，但是获取不到 nacos 配置的数据，应该是 springcloud 版本问题。</p></div><p>解决方案：在<code>electricity-common</code>模块添加依赖。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="命名空间和分组"><a href="#命名空间和分组" class="headerlink" title="命名空间和分组"></a>命名空间和分组</h3><p>nacos 中可以划分不同的命名空间和分组，默认的命名空间是 public，默认分组为 DEFAULT_GROUP。当配置文件较多时，我们可以配置不同的命名空间和分组对配置进行管理。</p><p>在 nacos 配置中心页面配置好命名空间和分组，然后在<code>bootstrap.properties</code>文件中添加配置。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命名空间ID</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">dev</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.group</span>=<span class="string">coupon</span></span><br></pre></td></tr></table></figure><h3 id="加载多配置集"><a href="#加载多配置集" class="headerlink" title="加载多配置集"></a>加载多配置集</h3><p>当配置信息比较多时，所有配置都放在一个文件里不好维护，我们可以把配置信息分离出来配置多个数据文件。</p><p>可以按照项目中配置的不同模块，将<code>application.yml</code>中的数据配置分离。例如按照数据源，mybatis，springcloud等划分成多个文件。然后按照之前的方式，新建配置文件，放在相应的命名空间和分组下。</p><p>在<code>bootstrap.properties</code>文件中添加配置。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[0].data-id</span>=<span class="string">datasource.yml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[0].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[1].data-id</span>=<span class="string">mybatis.yml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[1].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[1].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[2].data-id</span>=<span class="string">other.yml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[2].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[2].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><h3 id="新建模块"><a href="#新建模块" class="headerlink" title="新建模块"></a>新建模块</h3><p>新建 springboot 模块，勾选 gateway 依赖。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.laughing.electricity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>electricity-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>electricity-gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>API网关<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2020.0.3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringCloud Feign在Hoxton.M2 RELEASED版本之后不再使用Ribbon而是使用spring-cloud-loadbalancer--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置-nacos"><a href="#配置-nacos" class="headerlink" title="配置 nacos"></a>配置 nacos</h3><ul><li><p>在启动类上开启<code>@EnableDiscoveryClient</code></p></li><li><p>在 <strong>application.properties</strong> 中配置 nacos 信息</p></li></ul><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">electricity-gateway</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8888</span></span><br></pre></td></tr></table></figure><ul><li>新建 <strong>bootstrap.properites</strong> 配置文件</li></ul><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">electricity-gateway</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure><ul><li>新建 application.yml 配置文件</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">zhibo8</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.zhibo8.cc</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,zhibo8</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">bing</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://bing.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,bing</span></span><br></pre></td></tr></table></figure><p>访问 <code>localhost:8888/?bing</code>可以直接跳转到 <code>https://www.bing.com</code></p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springcloud </tag>
            
            <tag> springcloud alibaba </tag>
            
            <tag> nacos </tag>
            
            <tag> open feign </tag>
            
            <tag> gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java微服务项目谷粒商城-项目框架搭建</title>
      <link href="/2021/06/14/Java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/06/14/Java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="后端项目搭建"><a href="#后端项目搭建" class="headerlink" title="后端项目搭建"></a>后端项目搭建</h2><h3 id="克隆远程仓库项目"><a href="#克隆远程仓库项目" class="headerlink" title="克隆远程仓库项目"></a>克隆远程仓库项目</h3><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><p>在 github 上新建一个仓库，生成<code>.gitignore</code>文件。</p><h4 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h4><p>在 idea 中新建项目：</p><ul><li>file -&gt; new -&gt; project from version control</li><li>在 idea 中输入仓库地址</li></ul><h3 id="配置-gitignore"><a href="#配置-gitignore" class="headerlink" title="配置 .gitignore"></a>配置 .gitignore</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### IntelliJ IDEA ###</span></span><br><span class="line">.idea</span><br><span class="line"><span class="strong">**/mvnw</span></span><br><span class="line"><span class="strong">**</span>/mvnw.cmd</span><br><span class="line"><span class="strong">**/.gitignore</span></span><br><span class="line"><span class="strong">**</span>/.mvn</span><br><span class="line"><span class="strong">**/target/</span></span><br></pre></td></tr></table></figure><h3 id="创建微服务模块"><a href="#创建微服务模块" class="headerlink" title="创建微服务模块"></a>创建微服务模块</h3><ol><li>在项目中用 <strong>springboot</strong> 分别创建各个项目模块（<strong>商品模块，优惠券模块，会员模块，订单模块，仓库模块</strong>）。</li></ol><table><thead><tr><th>模块</th><th>描述</th></tr></thead><tbody><tr><td>electricity-coupon</td><td>优惠券模块</td></tr><tr><td>electricity-member</td><td>会员模块</td></tr><tr><td>electricity-order</td><td>订单模块</td></tr><tr><td>electricity-product</td><td>商品模块</td></tr><tr><td>electricity-ware</td><td>仓库模块</td></tr></tbody></table><ol start="2"><li>聚合模块</li></ol><p>在项目根目录下新建一个<code>pom.xml</code>文件，将各个模块聚合在一起。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.laughing.electricity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>electricity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>electricity<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>聚合服务<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>electricity-coupon<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>electricity-member<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>electricity-order<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>electricity-product<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>electricity-ware<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ol><li>在 docker 中安装的数据库中创建数据库。</li></ol><table><thead><tr><th>数据库</th><th>描述</th></tr></thead><tbody><tr><td>electricity_oms</td><td>订单数据库</td></tr><tr><td>electricity_pms</td><td>商品数据库</td></tr><tr><td>electricity_sms</td><td>优惠券数据库</td></tr><tr><td>electricity_ums</td><td>会员数据库</td></tr><tr><td>electricity_wms</td><td>仓库数据库</td></tr></tbody></table><ol start="2"><li>生成各个数据库的表</li></ol><p>根据 sql 文件生成各个数据库的表。</p><h3 id="搭建后台管理系统"><a href="#搭建后台管理系统" class="headerlink" title="搭建后台管理系统"></a>搭建后台管理系统</h3><h4 id="下载开源脚手架"><a href="#下载开源脚手架" class="headerlink" title="下载开源脚手架"></a>下载开源脚手架</h4><p>在码云上下载人人开源的<a href="https://gitee.com/renrenio/renren-fast">renren-fast</a>后台管理系统脚手架。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@gitee.com:renrenio/renren-fast.git</span><br></pre></td></tr></table></figure><h4 id="配置脚手架"><a href="#配置脚手架" class="headerlink" title="配置脚手架"></a>配置脚手架</h4><p>将下载的工程导入到项目的根目录，然后聚合到项目中，更新 maven，下载项目中的依赖。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>renren-fast<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>根据<code>renren-fast</code>项目下的 sql 文件创建数据库，并修改 <strong>application-dev.yml</strong> 文件中的数据库连接信息 。</p><h4 id="验证项目配置"><a href="#验证项目配置" class="headerlink" title="验证项目配置"></a>验证项目配置</h4><p>项目配置完成后，在<code>RenrenApplication</code>类上点击运行项目。如果项目运行时报错，缺少 jar 包，就将缺少的包导入到项目中。</p><p>项目启动成功后，在浏览器访问：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/renren-fast/</span><br></pre></td></tr></table></figure><p>返回结果是 401 则表明后台部分搭建成功，这里返回 401 是因为这个脚手架是前后端分离的，需要再搭建前端才能正确的访问项目。</p><h2 id="前端项目搭建"><a href="#前端项目搭建" class="headerlink" title="前端项目搭建"></a>前端项目搭建</h2><h3 id="下载开源脚手架-1"><a href="#下载开源脚手架-1" class="headerlink" title="下载开源脚手架"></a>下载开源脚手架</h3><p>在码云上下载人人开源的<a href="https://gitee.com/renrenio/renren-fast-vue">renren-fast-vue</a>后台管理系统脚手架。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@gitee.com:renrenio/renren-fast-vue.git</span><br></pre></td></tr></table></figure><h3 id="安装配置-node-js"><a href="#安装配置-node-js" class="headerlink" title="安装配置 node.js"></a>安装配置 node.js</h3><p>下载安装<code>node.js</code>，然后设置 <strong>npm</strong> 国内镜像。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> cnpm <span class="literal">--registry</span>=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> registry <span class="string">&quot;https://registry.npm.taobao.org&quot;</span></span><br></pre></td></tr></table></figure><h3 id="下载项目依赖的插件"><a href="#下载项目依赖的插件" class="headerlink" title="下载项目依赖的插件"></a>下载项目依赖的插件</h3><p><strong>以管理员身份</strong>打开 <strong>vscode</strong>， 然后再打开项目，在 <strong>vscode 控制台</strong>输入<code>npm install</code>安装插件。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="安装-nvm-管理-node"><a href="#安装-nvm-管理-node" class="headerlink" title="安装 nvm 管理 node"></a>安装 nvm 管理 node</h3><p>上面的方法或者其他方法无法安装成功，可能是 <strong>node 版本过高</strong>的问题。如果安装的 node.js 版本过高，可以降低 node.js 的版本再试试。</p><p>通过<code>nvm</code>工具可以管理 node 的版本。</p><ul><li>下载安装 nvm</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://github.com/coreybutler/nvm-windows/releases</span><br></pre></td></tr></table></figure><ul><li>管理 node 版本</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前系统已安装的 node 版本</span></span><br><span class="line">nvm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 10.16.3 版本的 node</span></span><br><span class="line">nvm install v10.<span class="number">16.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 12.18.0 版本的 node</span></span><br><span class="line">nvm use v12.<span class="number">18.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有命令</span></span><br><span class="line">nvm <span class="literal">-h</span></span><br></pre></td></tr></table></figure><ul><li>安装 npm</li></ul><p>安装多个版本时，npm 不会自动安装。所以需要手动安装 node 对应版本的 npm。</p><p>在<a href="https://npm.taobao.org/mirrors/npm/">淘宝镜像</a>下载 npm，然后解压到 node 目录下的 <strong>node_modules</strong>文件夹，把 <strong>bin 目录</strong>下的文件复制到这个版本 node 的根目录。</p><p>或者可以不用 nvm 安装不同版本的 node，直接去<a href="https://nodejs.org/zh-cn/download/releases/">node 官网</a>下载 node，解压后复制到 nvm 根目录，把 node 目录名改成 <strong>v 加版本号，例如：v12.18.0</strong>。</p><ul><li>启动前端项目</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>启动后前端登录页面如果没有验证码，需要注意几点：</p><ol><li>先启动后端<code>renren-fast</code>项目，再启动前端<code>renren-fase-vue</code>项目；</li><li>修改<code>/static/config/index.js</code>目录文件中<code> window.SITE_CONFIG[&#39;baseUrl&#39;] = &#39;本地api接口请求地址&#39;</code>;</li><li>修改<code>/config/dev.env.js</code>目录文件中<code>OPEN_PROXY: true</code>开启代理；</li><li>修改<code>/config/index.js</code>目录文件中<code>proxyTable</code>对象<code>target: &#39;代理api接口请求地址&#39;</code>，填本机<code>renren-fast</code>地址；</li><li>如果 springboot 版本较高，需要将<code>CorsConfig</code>类中的<code>.allowedOrigins</code>替换成<code>.allowedOriginPatterns</code>。</li></ol><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><h3 id="下载开源脚手架-2"><a href="#下载开源脚手架-2" class="headerlink" title="下载开源脚手架"></a>下载开源脚手架</h3><p>在码云上下载人人开源的<a href="https://gitee.com/renrenio/renren-generator">renren-fast-generator</a>后台管理系统脚手架。</p><h3 id="配置脚手架-1"><a href="#配置脚手架-1" class="headerlink" title="配置脚手架"></a>配置脚手架</h3><ul><li>将下载的工程导入到项目的根目录，然后聚合到项目中，更新 maven，下载项目中的依赖。</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>renren-fast-generator<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将<code>resources/template</code>目录下的<code>Controller.java.vm</code>文件中 <strong>shiro</strong> 相关的注解注释掉，后面用 <strong>spring security</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 相关的注解注释掉</span><br><span class="line">//@RequiresPermissions(&quot;$&#123;moduleName&#125;:$&#123;pathName&#125;:info&quot;)</span><br></pre></td></tr></table></figure><ul><li>新建 <strong>electricity-common</strong> 模块</li></ul><p>新建 <strong>electricity-common</strong> 模块，在 pom 文件中导入 mybatis-plus 和 lombok 的 maven 依赖。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生成逆向工程"><a href="#生成逆向工程" class="headerlink" title="生成逆向工程"></a>生成逆向工程</h3><ul><li>配置逆向工程信息</li></ul><p>将配置文件<code>application.yml</code>和<code>generator.properties</code>中的数据库和包名等信息修改成要生成逆向工程要的模块数据库和包名。</p><ul><li>生成逆向工程代码</li></ul><p>启动 <strong>renren-fast-generator</strong> 模块，打开前端页面，点击生成代码。代码生成后，将生成的代码复制到对应的模块包下面。生成的文件中会提示缺少引用的类（PageUtils,Query,R,Constant,HTMLFilter,SQLFilter），从 <strong>renren-fast</strong> 模块中直接复制到 <strong>electricity-common</strong>模块，并导入相关 maven 依赖。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CRUD-测试"><a href="#CRUD-测试" class="headerlink" title="CRUD 测试"></a>CRUD 测试</h3><p>逆向工程配置完成后，通过增删改查来验证下是否配置正确。</p><ul><li>导入 mybatis-plus 依赖</li></ul><p>上面的步骤中已经导入过了。</p><ul><li>配置 mysql 数据驱动信息</li></ul><p>mysql 的依赖上面也导入过了，只需要在 application.yml 文件中配置连接 mysql 的数据源信息。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.56.101:3306/electricity_pms</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><ul><li>配置扫描 dao 类</li></ul><p>在启动类上添加扫描 dao 相关类的扫描注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.laughing.electricity.product.dao&quot;)</span></span><br></pre></td></tr></table></figure><ul><li>配置 mybatis-plus 文件扫描</li></ul><p>在 application.yml 中配置 mybatis-plus mapper 扫描</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><p>在测试类中编写数据库增删改查操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricityProductApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BrandService brandService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BrandEntity</span> <span class="variable">brandEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrandEntity</span>();</span><br><span class="line">        brandEntity.setName(<span class="string">&quot;斯伯丁&quot;</span>);</span><br><span class="line">        brandService.save(brandEntity);</span><br><span class="line"></span><br><span class="line">        brandEntity.setBrandId(<span class="number">1L</span>);</span><br><span class="line">        brandEntity.setDescript(<span class="string">&quot;NBA比赛专用篮球&quot;</span>);</span><br><span class="line">        brandService.updateById(brandEntity);</span><br><span class="line">        List&lt;BrandEntity&gt; list = brandService.list(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;BrandEntity&gt;().eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;斯伯丁&quot;</span>));</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试通过后，剩下的几个模块按照上面的步骤，生成逆向工程代码即可。</p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mysql </tag>
            
            <tag> springboot </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java微服务项目谷粒商城-开发环境安装</title>
      <link href="/2021/06/07/Java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
      <url>/2021/06/07/Java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2><p>项目的开发环境需要使用 <strong>docker</strong>，<strong>mysql</strong>，<strong>redis</strong> 等软件，并且需要部署集群，所以需要安装在 <strong>linux 操作系统</strong>上。</p><p>因此，第一步就需要安装一个虚拟机。虚拟机有<code>virtual box</code>和<code>VMware</code>两种，随便下载一个直接安装就可以了。</p><h2 id="linux-系统安装"><a href="#linux-系统安装" class="headerlink" title="linux 系统安装"></a>linux 系统安装</h2><p>linux 系统推荐安装<code>centos</code>，一般在企业中使用最多的也是 centos 系统。系统安装比较简单，一直下一步，配置好系统的<strong>存储空间，内存和 CPU 核数</strong>就可以了。</p><p>安装好之后，需要配置虚拟机和宿主机之间的网络连接，看我前面这边博客<a href="https://lee-shawn.github.io/2021/06/06/VirtualBox%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E5%AE%BF%E4%B8%BB%E6%9C%BA/">VirtualBox设置网络连接宿主机</a>。</p><h2 id="开发环境安装"><a href="#开发环境安装" class="headerlink" title="开发环境安装"></a>开发环境安装</h2><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><h4 id="安装-Docker-的系统要求"><a href="#安装-Docker-的系统要求" class="headerlink" title="安装 Docker 的系统要求"></a>安装 Docker 的系统要求</h4><ul><li>Docker 需要一个较新的内核，CentOS  需要7之后的版本，系统架构必须是<strong>64 位</strong></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看内核版本</span></span><br><span class="line">uname -r</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 CentOS 版本</span></span><br><span class="line">cat /etc/redhat-release</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看系统架构</span></span><br><span class="line">uname -m</span><br></pre></td></tr></table></figure><ul><li>将 SELinux 置于 permissive 模式下运行</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 SELinux 模式</span></span><br><span class="line">sestatus</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 SELinux 模式</span></span><br><span class="line">sudo setenforce 0</span><br></pre></td></tr></table></figure><h4 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h4><ul><li>卸载旧的 Docker</li></ul><p>旧版本的 Docker 被称为<code>docker</code>或者<code>docker-engine</code>，如果安装了，连相关的依赖项一起卸载。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><ul><li>使用 repository 安装</li></ul><p>安装 Docker Engine 之前，需要先设置<code>Docker repository</code>，之后可以从 repository 中安装和升级 Docker。</p><ol><li>设置 repository</li></ol><p>安装<code>yum-utils</code>包，它提供了<code>yum-config-manager</code>使用工具，然后安装<code>stable</code>repository。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 Docker Engine</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装最新版本的 Docker Engine 和容器</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装特定版本的 Docker Engine</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure><h4 id="启动-docker"><a href="#启动-docker" class="headerlink" title="启动 docker"></a>启动 docker</h4><ul><li>启动 docker</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><ul><li>设置开机启动</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker </span><br></pre></td></tr></table></figure><ul><li>验证是否安装成功</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="mysql-安装"><a href="#mysql-安装" class="headerlink" title="mysql 安装"></a>mysql 安装</h3><h4 id="下载-mysql-镜像"><a href="#下载-mysql-镜像" class="headerlink" title="下载 mysql 镜像"></a>下载 mysql 镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><h4 id="创建实例并启动"><a href="#创建实例并启动" class="headerlink" title="创建实例并启动"></a>创建实例并启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name指定容器名字，-v 将对应文件挂载到主机，-e初始化mysql密码 ，-d后台运行，-p 容器端口映射到主机的端口</span></span><br><span class="line">sudo docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><h4 id="配置-mysql"><a href="#配置-mysql" class="headerlink" title="配置 mysql"></a>配置 mysql</h4><ul><li>在<code>/mydata/mysql/conf</code>目录新建<code>my.cnf</code>文件，并添加配置</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure><ul><li><p>设置 mysql 开机自启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker update mysql --restart=always</span><br></pre></td></tr></table></figure></li><li><p>重启 mysql</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure><ul><li>验证是否配置成功</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 docker</span></span><br><span class="line">docker exec -it mysql /bin/bash</span><br><span class="line">cat /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure><h3 id="redis-安装"><a href="#redis-安装" class="headerlink" title="redis 安装"></a>redis 安装</h3><h4 id="下载-redis-镜像"><a href="#下载-redis-镜像" class="headerlink" title="下载 redis 镜像"></a>下载 redis 镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><h4 id="创建实例并启动-1"><a href="#创建实例并启动-1" class="headerlink" title="创建实例并启动"></a>创建实例并启动</h4><ul><li>现在 linux 上面创建好<code>redis.conf</code>文件，防止挂载时出现错误</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /mydata/redis/conf</span><br><span class="line">touch /mydata/redis/conf/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6379:6379 --name redis \</span><br><span class="line">-v /mydata/redis/data:/data \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h4 id="配置-redis"><a href="#配置-redis" class="headerlink" title="配置 redis"></a>配置 redis</h4><ul><li>在<code>/mydata/redis/conf/redis.conf</code> 文件中设置 redis 持久化</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 redis 持久化</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><ul><li><p>设置 redis 开机自启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker update redis --restart=always</span><br></pre></td></tr></table></figure></li><li><p>重启 redis</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart redis</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行模式进入 redis</span></span><br><span class="line">docker exec -it redis redis-cli</span><br></pre></td></tr></table></figure><ul><li>验证是否配置成功</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it redis /bin/bash</span><br><span class="line">cat /mydata/redis/conf/redis.conf</span><br></pre></td></tr></table></figure><h2 id="开发工具配置"><a href="#开发工具配置" class="headerlink" title="开发工具配置"></a>开发工具配置</h2><h3 id="maven-配置"><a href="#maven-配置" class="headerlink" title="maven 配置"></a>maven 配置</h3><ul><li>配置 maven 配置文件 settings.xml</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置本地仓库位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>C:/Development/Maven/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置依赖下载地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置maven编译所需jdk版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>JDK-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span>       </span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span>       </span><br><span class="line">            <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span>       </span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>       </span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>       </span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vscode-插件配置"><a href="#vscode-插件配置" class="headerlink" title="vscode 插件配置"></a>vscode 插件配置</h3><ul><li>安装插件</li></ul><ol><li>Auto Close Tags</li><li>Auto Rename Tags</li><li>HTML CSS Support</li><li>HTML Snippets</li><li>JavaScript  ES6 code snippets</li><li>Live Server</li><li>Open in browser</li><li>Vetur</li></ol><h3 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h3><h4 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h4><p>下载安装 git <a href="https://git-scm.com/">客户端</a>。</p><h4 id="配置帐号"><a href="#配置帐号" class="headerlink" title="配置帐号"></a>配置帐号</h4><ul><li>右键<code>git bash here</code>，打开 git 命令行。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置用户名</span></span><br><span class="line">git config --global user.name &quot;user.name&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置邮箱，邮箱地址随便填，不一定要填真实有效的邮箱（亲测有效）</span></span><br><span class="line">git config --global user.email &quot;username@email.com&quot;</span><br></pre></td></tr></table></figure><h4 id="配置免密推送"><a href="#配置免密推送" class="headerlink" title="配置免密推送"></a>配置免密推送</h4><ul><li>在 git bash 中输入以下命令，敲击三次回车。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;username@email.com&quot;</span><br></pre></td></tr></table></figure><ul><li>查看生成的文件内容，复制内容到<code>github</code>或者<code>gitee</code>的 SSH 公钥配置页面（设置 -&gt; SSH 公钥 -&gt; 添加 -&gt; 保存）。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>测试是否添加成功。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T username@email.com</span><br></pre></td></tr></table></figure><h4 id="推送本地项目到远程仓库"><a href="#推送本地项目到远程仓库" class="headerlink" title="推送本地项目到远程仓库"></a>推送本地项目到远程仓库</h4><ul><li>新建仓库</li></ul><p>新建一个仓库，勾选生成<code>.gitignore</code>文件。</p><ul><li>克隆项目到本地</li></ul><p>使用 idea 新建一个项目（file -&gt; new -&gt; project from version control），将刚才新建的项目地址复制到 url 框中。</p><ul><li>提交文件到远程仓库</li></ul><ol><li>新建文件时，在文件上右键<code>Git -&gt; add</code>，将新增的文件添加到本地仓库</li><li>修改文件时，在文件上右键<code>Git -&gt; commit file</code></li><li>输入提交日志，点击<code>commit an push</code></li><li>在提交的文件上右键<code>Git -&gt; Repository -&gt; Push</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VirtualBox设置网络连接宿主机</title>
      <link href="/2021/06/06/VirtualBox%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E5%AE%BF%E4%B8%BB%E6%9C%BA/"/>
      <url>/2021/06/06/VirtualBox%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E5%AE%BF%E4%B8%BB%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info flat"><p>在自己电脑上开发个人项目，有些服务需要安装在 linux 系统上，可以买个云服务器安装，也可以在自己电脑上装个虚拟机安装，这样既方便也是免费的。</p></div><p>在虚拟机上安装完 linux 系统之后，需要配置网络连接才能让虚拟机和宿主机互通，并且连接外网。</p><h2 id="Virtual-Box-网络模式"><a href="#Virtual-Box-网络模式" class="headerlink" title="Virtual Box 网络模式"></a>Virtual Box 网络模式</h2><p>VIrtual Box 有四种网络连接模式，不同的模式下，宿主机和虚拟机的连接情况是不同的。</p><table><thead><tr><th>连通性模式名称</th><th>外部网络</th><th>宿主机（有线网络)</th><th>宿主机（无线网络)</th><th>同宿主机虚拟机</th><th>跨宿主机虚拟机</th></tr></thead><tbody><tr><td>NAT网络</td><td>√</td><td>√</td><td>x</td><td>√</td><td>x</td></tr><tr><td>桥接网卡</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>内部网络</td><td>x</td><td>x</td><td>x</td><td>√</td><td>x</td></tr><tr><td>仅主机(Host-Only)网络</td><td>x</td><td>√</td><td>√</td><td>√</td><td>x</td></tr></tbody></table><h2 id="网卡设置"><a href="#网卡设置" class="headerlink" title="网卡设置"></a>网卡设置</h2><p>让虚拟机能和宿主机互通，并能连接外网有多种设置方式。这里选择配置两块网卡的方式，一块网卡的类型是<code>网络地址转换（NAT）</code>，另一块网卡的类型是<code>仅主机（Host-Only）网络</code>。</p><h3 id="Virtual-Box-网卡设置"><a href="#Virtual-Box-网卡设置" class="headerlink" title="Virtual Box 网卡设置"></a>Virtual Box 网卡设置</h3><p>先关闭要配置网卡的系统，点击设置，然后选择网络。启用网卡一，连接方式选择<strong>仅主机(Host-Only)网络</strong>，再启用网卡二，连接方式选择**网络地址转换(NAT)**。</p><h3 id="linux-网络配置"><a href="#linux-网络配置" class="headerlink" title="linux 网络配置"></a>linux 网络配置</h3><ol><li><p>查看宿主机 IP 地址，其中有一个<code>以太网适配器 VirtualBox Host-Only Network</code>，这个网段就是后面虚拟机中要配置的网段。</p></li><li><p>启动 linux 系统，查看网卡信息，然后根据宿主机上的<code>VirtualBox Host-Only Network</code>网段配置 IP。网卡 enp0s8 已经默认配置了 IP 10.0..3.15，我们在另外一块网卡上配置 IP。</p></li><li><p>打开<code>/ect/sysconfig/network-scripts/ifcfg-enp0s3</code> 配置 IP</p></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=enp0s3</span><br><span class="line">UUID=b0aed397-8e79-40d9-b007-a2113288e616</span><br><span class="line">DEVICE=enp0s3</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.56.101</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=182.168.56.1</span><br><span class="line">DNS=8.8.8.8</span><br></pre></td></tr></table></figure><ol start="4"><li>配置完成后重启网卡再查看 IP</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br><span class="line"></span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="/postimg/VirtualBox%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E5%AE%BF%E4%B8%BB%E6%9C%BA/ipconfig.png" alt="IP"></p><h3 id="验证是否配置成功"><a href="#验证是否配置成功" class="headerlink" title="验证是否配置成功"></a>验证是否配置成功</h3><ul><li>在宿主机和虚拟机之间相互 ping，能 ping 通，说明宿主机和虚拟机之间就能互通了。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 192.168.1.103</span><br><span class="line"></span><br><span class="line">pint 192.168.56.101</span><br></pre></td></tr></table></figure><ul><li>在 linux 上 ping 百度的地址，如果能通说明虚拟机能连接外网了。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> virtual box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地音乐播放器-foobar2000</title>
      <link href="/2021/06/05/%E6%9C%AC%E5%9C%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8-foobar2000/"/>
      <url>/2021/06/05/%E6%9C%AC%E5%9C%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8-foobar2000/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info flat"><p>现在是全面付费的年代，听歌看视频基本都要收费了，以前免费的歌曲现在很多都收费了，尤其是经典的歌曲。就算开了会员，如果会员到期了就不能再听了，所以很多人就把歌曲下载到本地来听。虽然本地音乐用网易云，QQ 音乐等在线的音乐播放器也可以播放本地音乐，但是这里推荐一款更好的本地音乐播放器-foobar2000。</p></div><h2 id="Foobar2000-下载"><a href="#Foobar2000-下载" class="headerlink" title="Foobar2000 下载"></a>Foobar2000 下载</h2><p>如果你喜欢 foobar200 原生的版本或者喜欢自己折腾配置，可以直接去<a href="https://www.foobar2000.org/download">官网</a>下载。如果不想用原生的版本，但是又不想自己折腾，可以去下载别人设置好的版本。我这里下载的是一个大神<a href="https://github.com/dream7180/foobox-cn/">修改好的版本</a>。</p><h2 id="Foobar2000-特点"><a href="#Foobar2000-特点" class="headerlink" title="Foobar2000 特点"></a>Foobar2000 特点</h2><p>Foobar2000 是一款<strong>占用资源少</strong>，可以<strong>自定义界面，布局和功能</strong>的本地音乐播放器，而且是<strong>免费的，没有广告</strong>。所以网上有各种各样的插件可供下载，你可以根据自己的喜好配置插件，当然也有很多人就是喜欢 foobar 的简洁才用的。</p><p><img src="/postimg/%E6%9C%AC%E5%9C%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8-foobar2000/foobar2000%E7%95%8C%E9%9D%A2.png" alt="foobar2000播放界面"></p><h2 id="导入歌曲"><a href="#导入歌曲" class="headerlink" title="导入歌曲"></a>导入歌曲</h2><h3 id="添加播放列表"><a href="#添加播放列表" class="headerlink" title="添加播放列表"></a>添加播放列表</h3><p>常规的导入歌曲的方式，新建歌曲列表，然后将本地音乐导入列表。但是这样导入歌曲会有个问题，如果后面你本地又下载了新的歌曲就需要再重新导入，每次都要重新导入很麻烦；而且如果本地文件被删除了播放器列表任然会存在，再播放会出现错误。</p><p>我们可以换一种智能的添加方式：</p><ol><li>在播放列表部分点击右键，选择添加，然后选择新建智能播放列表</li><li>在智能播放列表属性，查询模版中添加歌曲路径，双引号里面填写你的歌曲路径，路径填到<strong>最深一层文件夹路径</strong>。</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">%path% HAS &quot;D:\music\z&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>排序模版中添加 title</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">%title%</span><br></pre></td></tr></table></figure><p><img src="/postimg/%E6%9C%AC%E5%9C%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8-foobar2000/%E6%B7%BB%E5%8A%A0%E6%99%BA%E8%83%BD%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8.png" alt="添加智能播放列表"></p><ol start="4"><li>添加完成后，修改播放列表名称，修改完名称后<strong>一定要点击回车键</strong>，不然名称不会被修改。</li></ol><p>播放列表添加完成后，并不会将本地的文件导入到播放列表，还需要配置监听路径。</p><h3 id="配置监听路径"><a href="#配置监听路径" class="headerlink" title="配置监听路径"></a>配置监听路径</h3><p>按住快捷键<code>ctrl + p</code>打开参数选项页面，选择媒体库，添加本地音乐存放的路径，这里只需要添加到保存文件的第一层路径即可，这样只需要添加一次监听就可以了。</p><p><img src="/postimg/%E6%9C%AC%E5%9C%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8-foobar2000/%E6%B7%BB%E5%8A%A0%E7%9B%91%E5%90%AC%E8%B7%AF%E5%BE%84.png" alt="添加监听路径"></p><p>只能播放列表和监听路径都配置好之后，当在你配置的路径里面加入新的歌曲时，foobar2000 就会自动加载进去新的歌曲。</p><p>Foobar2000 安装后会创建一个虚拟磁盘 B 盘，如果你的歌曲文件都放在 foobar2000 的安装目录下，监听路径可以选择虚拟盘下的文件路径。选择虚拟盘路径有个好处就是，当你将 foobar2000 整个文件夹拷贝到另外一台电脑时，即使跟原来的电脑安装的不是在同一个盘符下（比如当前的电脑装在 D 盘，新电脑装在 E 盘）也不需要再重新添加监听，直接可以使用。</p><h2 id="添加歌曲信息"><a href="#添加歌曲信息" class="headerlink" title="添加歌曲信息"></a>添加歌曲信息</h2><p>我们在网上下载的很多歌曲只有歌曲名和歌手名，其他信息都没有，这样在播放器里面看都是空白的或者显示未知信息。作为有强迫症的我，看着很不舒服。我下载的这个 foobar2000，作者在播放器中集成了 MusicTag 插件，可以用这个插件从网上自动下载歌曲的相关信息。</p><p><img src="/postimg/%E6%9C%AC%E5%9C%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8-foobar2000/%E7%BC%BA%E5%B0%91%E6%AD%8C%E6%9B%B2%E4%BF%A1%E6%81%AF.png" alt="缺少歌曲信息"></p><p>我们选中要添加信息的歌曲，右键选择用 MusicTag 编辑。在新弹出的窗口中选中歌曲，再选择菜单栏上的自动匹配标签，把你需要的歌曲信息都勾选上，点击确定等待下载。</p><p><img src="/postimg/%E6%9C%AC%E5%9C%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8-foobar2000/MusicTag%E4%B8%8B%E8%BD%BD%E6%AD%8C%E6%9B%B2%E4%BF%A1%E6%81%AF.png" alt="MusicTag下载歌曲信息"></p><div class="note warning flat"><p>配置完成后，就可以愉快的听歌了。这里我只是做了最简单的配置。Foobar2000 具有很强的可自配性，有很多的插件可供配置，你甚至可以自己开发插件，感兴趣的可以自己去配置。</p></div>]]></content>
      
      
      <categories>
          
          <category> 软件分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法-双链表</title>
      <link href="/2021/06/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8F%8C%E9%93%BE%E8%A1%A8/"/>
      <url>/2021/06/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8F%8C%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info flat"><p>单链表只有一个后继指针，所以只能从前往后遍历，无法向前遍历寻找前面的结点。双链表除了有后继指针之外，还有一个<strong>指向前一个结点的前驱指针</strong>，这样既可以往后遍历，也可以往前遍历。</p></div><h2 id="双链表结点"><a href="#双链表结点" class="headerlink" title="双链表结点"></a>双链表结点</h2><p>双链表有两个指针域和一个数据域，数据域存放数据，两个指针域分别指向<strong>前驱结点</strong>和<strong>后继结点</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    DoubleListNode previous;</span><br><span class="line">    DoubleListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoubleListNode</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><p>双链表有前驱指针，所以寻找当前结点的前一个结点只需要 O(1) 的时间复杂度即可。单链表只能从前向后遍历，双链表可以从头遍历，也可以从后往前遍历，在操作上更灵活。</p><h2 id="创建双链表"><a href="#创建双链表" class="headerlink" title="创建双链表"></a>创建双链表</h2><p>和单链表一样，双链表也可以使用<strong>头插法</strong>和<strong>尾插法</strong>建立双链表。在建立链表时，<strong>使用带头结点的链表进行插入和删除操作时更方便</strong>。使用头结点，在对首结点和尾结点进行操作时，和其他普通结点操作一样，如果没有头结点，操作首结点和尾结点时要进行额外的判断处理。</p><h3 id="头插法建立双链表"><a href="#头插法建立双链表" class="headerlink" title="头插法建立双链表"></a>头插法建立双链表</h3><p>头插法建立双链表，每次插入的新结点都插入到头结点后面作为新的首结点。在插入的过程中，要保证链表不能出现断链的情况，否则无法找到后面的结点。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DoubleListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleListNode</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 头插法建立双链表</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> n 节点个数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">headCreateDoubleLinkedList</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;参数不合法！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 建立第一个节点</span></span><br><span class="line">    <span class="type">DoubleListNode</span> <span class="variable">first</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleListNode</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 头节点前驱指针和第一个节点后继指针置为空</span></span><br><span class="line">    head.previous = <span class="literal">null</span>;</span><br><span class="line">    head.next = first;</span><br><span class="line">    first.previous = head;</span><br><span class="line">    first.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 循环建立节点插入头节点后面</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">DoubleListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleListNode</span>(i);</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        head.next.previous = node;</span><br><span class="line">        node.previous = head;</span><br><span class="line">        head.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾插法建立双链表"><a href="#尾插法建立双链表" class="headerlink" title="尾插法建立双链表"></a>尾插法建立双链表</h3><p>尾插法建立双链表，每次插入的新结点都插入到上一次插入的结点后面作为新的尾结点。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 尾插法建立双链表</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> n 节点个数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tailCreateDoubleLinkedList</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;参数不合法！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">DoubleListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">DoubleListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleListNode</span>(i);</span><br><span class="line">        temp.next = node;</span><br><span class="line">        node.previous = temp;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入结点"><a href="#插入结点" class="headerlink" title="插入结点"></a>插入结点</h2><p>双链表插入结点只需要修改结点的指针指向即可，不需要移动元素，所以插入结点的时间复杂度为 O(1)，但是链表只能按顺序遍历，所以查找结点要插入的位置的时间复杂度为 O(n)，综合来看，**双链表插入结点的时间复杂度还是 O(n)**。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 插入节点，在要插入节点后面插入</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> n 插入位置</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> m 节点数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDoubleListNode</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取链表长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> getDoubleLinkedListLength();</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span> || n &gt; length) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;插入位置非法！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">DoubleListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 只有头节点</span></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">DoubleListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleListNode</span>(m);</span><br><span class="line">        temp.next = node;</span><br><span class="line">        node.previous = temp;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 移动指针到要插入的节点位置</span></span><br><span class="line">    <span class="keyword">while</span> (count &lt; n) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在结尾插入节点</span></span><br><span class="line">    <span class="keyword">if</span> (n == length) &#123;</span><br><span class="line">        <span class="type">DoubleListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleListNode</span>(m);</span><br><span class="line">        temp.next = node;</span><br><span class="line">        node.previous = temp;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">DoubleListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleListNode</span>(m);</span><br><span class="line">    node.next = temp.next;</span><br><span class="line">    temp.next.previous = node;</span><br><span class="line">    node.previous = temp;</span><br><span class="line">    temp.next = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除结点"><a href="#删除结点" class="headerlink" title="删除结点"></a>删除结点</h2><p>删除结点只需要将要删除结点的前驱结点的后继指针指向删除结点的后继结点，再将后继结点的前驱指针指向删除结点的前驱结点，无须移动元素，所以双链表删除结点的时间复杂度是 O(1)。同样，删除结点前，需要先遍历找到该结点，遍历需要的时间复杂度是 O(n)，所以删除结点的时间复杂度也是 O(n)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 删除节点</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> n 节点位置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteDoubleListNode</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> getDoubleLinkedListLength();</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || n &gt; length) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;节点不存在！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">DoubleListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 只有一个节点，head的next置为null</span></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">        value = temp.next.id;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除的节点值为：&quot;</span> + value);</span><br><span class="line">        temp.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (count &lt; n) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除最后一个节点，next置为null</span></span><br><span class="line">    <span class="keyword">if</span> (n == length) &#123;</span><br><span class="line">        value = temp.id;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除的节点值为：&quot;</span> + value);</span><br><span class="line">        temp.previous.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    value = temp.id;</span><br><span class="line">    System.out.println(<span class="string">&quot;删除的节点值为：&quot;</span> + value);</span><br><span class="line">    temp.previous.next = temp.next;</span><br><span class="line">    temp.next.previous = temp.previous;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法-单链表</title>
      <link href="/2021/06/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
      <url>/2021/06/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note flat"><p>数据结构讨论的是数据的存储方式，常用的数据结构分为两大类，一类是线性结构，一类是非线性结构。线性结构是一对一的关系，非线性结构是一对多，或者多对多的关系。链表，栈，队列等数据结构是线性结构；树，图等数据结构是非线性结构。</p></div><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是通过指针将一组零散的内存块串连在一起，我们称这个内存块为链表的结点。结点一般有指针域和数据域两个部分，不同类型的链表，指针域有所不同。</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>单链表是指每个结点<strong>有且只有一个后继指针</strong>指向下一个结点，并且最后一个结点的后继指针为 <strong>NULL</strong>。</p><p>链表中第一个结点称之为<strong>头结点</strong>，最后一个结点称之为<strong>尾结点</strong>。头结点用来记录链表的基地址，有了头结点，我们可以遍历整个链表；尾结点的后继指针为空，表示这是链表的最后一个结点。头结点不存放数据，只存放指向首结点的指针域，引入头结点的目的是为了方面链表的插入和删除操作。</p><p><img src="/postimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/linked-list.png" alt="单链表"></p><h3 id="结点"><a href="#结点" class="headerlink" title="结点"></a>结点</h3><p>单链表的结点由数据域和一个指向下一个结点的指针域组成。</p><p><img src="/postimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/node.png" alt="单链表结点"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ListNode 类定义了一个单链表的结点，id 和 name 是数据域，next 是指向下一个结点的指针域。下一个结点和当前结点一样都是 ListNode 类型。</p><h2 id="创建单链表"><a href="#创建单链表" class="headerlink" title="创建单链表"></a>创建单链表</h2><h3 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h3><p><img src="/postimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/head-insert.png" alt="头插法建立单链表"></p><p>头插法建立单链表是将每次创建的结点都插入到头结点后面，作为链表<strong>头结点后面的第一个结点</strong>。插入新结点时，<strong>要先将新插入结点的 next 指针先指向头结点的下一个结点，再将头结点的 next 指针指向新插入的结点</strong>。如果先将头结点的 next 指针指向了新插入的结点，就会导致链表断开，这样就找不到后面的结点了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头结点，辅助结点便于链表的操作</span></span><br><span class="line"><span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 头插法：每次插入的结点成为链表中的第一个结点</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> node 结点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">headCreateSingleLinkedList</span><span class="params">(ListNode node)</span> &#123;</span><br><span class="line">    <span class="comment">// 链表为空，直接插入到头结点后面；链表不为空，新结点插入到非头结点的第一个结点前面</span></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 头结点next域指向新结点</span></span><br><span class="line">        head.next = node;</span><br><span class="line">        <span class="comment">// 结点的next域为空</span></span><br><span class="line">        node.next = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 新结点指向头结点的下一个结点</span></span><br><span class="line">        node.next = head.next;</span><br><span class="line">        <span class="comment">// 头结点指向新结点，新结点成为新的非头结点之外的第一个结点</span></span><br><span class="line">        head.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h3><p><img src="/postimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/tail-insert.png" alt="尾插法建立单链表"></p><p>尾插法建立单链表是将每次创建的结点依次链接在前一个结点的后面，作为链表的<strong>尾结点</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头结点，辅助结点便于链表的操作</span></span><br><span class="line"><span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 尾插法：每次插入的结点成为链表中的最后一个结点</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> node 结点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tailCreateSingleLinkedList</span><span class="params">(ListNode node)</span> &#123;</span><br><span class="line">    <span class="comment">// 辅助变量用来找到最后一个结点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">// 循环遍历找到最后一个结点</span></span><br><span class="line">    <span class="keyword">while</span> (temp.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将新的结点链接到最后</span></span><br><span class="line">    temp.next = node;</span><br><span class="line">    <span class="comment">// 最后一个结点的next域为空</span></span><br><span class="line">    node.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入结点"><a href="#插入结点" class="headerlink" title="插入结点"></a>插入结点</h2><p>链表插入结点不需要像数组一样移动元素，只需要修改待插入位置相邻结点的指针即可。</p><p><img src="/postimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/insert-node.png" alt="插入结点"></p><p>链表插入结点的时间复杂度为 O(1)，但是链表在插入元素前需要先找到待插入的位置，而单链表只能从头结点开始按顺序往下依次查找，所以查找的时间复杂度为 O(n)，综合来看，**单链表插入结点的时间复杂度为 O(n)**。</p><p>链表在插入结点时，<strong>要先将待插入结点的 next 指针指向待插入位置的下一个结点</strong>，然后将前一个结点的 next 指针指向待插入的结点。如果先将待插入位置前一个结点的 next 指针先指向了 待插入的结点，就会造成链表断开，后面的结点就丢失了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 插入结点，在给定索引位置后插入</span></span><br><span class="line"><span class="comment">  * 先将要插入的结点的next域指向要插入位置的下一个结点</span></span><br><span class="line"><span class="comment">  * 再将要插入位置前的结点的next域指向要插入的结点</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> index 结点索引</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> node 待插入的结点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addListNode</span><span class="params">(<span class="type">int</span> index, ListNode node)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 头结点为空，链表不存在</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链表不存在，无法插入！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 索引为负数，或者大于链表长度无法插入</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt; singleLinkedListLength() || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结点插入位置非法！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在头结点后面插入</span></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        headCreateSingleLinkedList(node);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 任意其他位置插入</span></span><br><span class="line">    <span class="keyword">while</span> (temp.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 索引位置后移</span></span><br><span class="line">        position++;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">        <span class="comment">// 找到要插入的位置</span></span><br><span class="line">        <span class="keyword">if</span> (position == index) &#123;</span><br><span class="line">            <span class="comment">// 要插入的结点先连接到后一个结点，否则链表会断开</span></span><br><span class="line">            node.next = temp.next;</span><br><span class="line">            temp.next = node;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除结点"><a href="#删除结点" class="headerlink" title="删除结点"></a>删除结点</h2><p>删除结点只需要将要删除结点的前一个结点的 next 指针直接指向要删除结点的下一个结点即可。</p><p><img src="/postimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/delete-node.png" alt="删除结点"></p><p>和插入结点相同，删除结点的时间复杂度为 O(1)，但是查询要删除的结点时间复杂度为 O(n)，所以**删除结点的时间复杂度还是 O(n)**。</p><p>插入结点只需要找到要插入的结点位置的结点即可，删除结点需要找到待删除的结点和它的前一个结点，因为需要将前一个结点的 next 指针指向待删除结点的下一个结点。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 删除结点，根据指定的名称删除</span></span><br><span class="line"><span class="comment">  * 找到要删除结点的位置和前一个位置，将前一个位置的next域指向要删除结点的下一个结点</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> name 结点名称</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteListNode</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">// 到删除的结点</span></span><br><span class="line">    ListNode deleteNode;</span><br><span class="line">    <span class="comment">// 辅助变量找到删除结点的位置</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">temp1</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">// 辅助变量找到删除结点的前一个位置</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">temp2</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">// 找到结点标志位</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 要删除的结点位置索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 要删除的结点前一个结点的位置索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">previous</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 链表不存在</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链表不存在，无法删除！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只有头结点</span></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链表为空，无法删除！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到要删除的结点位置</span></span><br><span class="line">    <span class="keyword">while</span> (temp1.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        position++;</span><br><span class="line">        temp1 = temp1.next;</span><br><span class="line">        <span class="comment">// 找到结点</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(temp1.name)) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;没找到要删除的结点！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只有一个非头结点之外的结点</span></span><br><span class="line">    <span class="keyword">if</span> (position == <span class="number">1</span> &amp;&amp; singleLinkedListLength() == <span class="number">1</span>) &#123;</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到要删除结点的前一个位置</span></span><br><span class="line">    <span class="keyword">while</span> (temp2.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 要删除的结点指向前一个结点的下一个位置</span></span><br><span class="line">        deleteNode = temp2.next;</span><br><span class="line">        <span class="keyword">if</span> (previous == position-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 删除最后一个结点</span></span><br><span class="line">            <span class="keyword">if</span> (position == singleLinkedListLength()) &#123;</span><br><span class="line">                temp2.next = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将前一个位置的next域指向下一个结点</span></span><br><span class="line">            temp2.next = deleteNode.next;</span><br><span class="line">            <span class="comment">// 删除结点的next域置空</span></span><br><span class="line">            deleteNode.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        previous++;</span><br><span class="line">        temp2 = temp2.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表的应用"><a href="#单链表的应用" class="headerlink" title="单链表的应用"></a>单链表的应用</h2><h3 id="反转单链表"><a href="#反转单链表" class="headerlink" title="反转单链表"></a>反转单链表</h3><p>单链表反转，将链表结点按顺序依次取下，按照<strong>头插法</strong>依次插入到一个新的头结点后面，再把原来的头结点指向指向新的头结点的下一个结点即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头结点，辅助结点便于链表的操作</span></span><br><span class="line"><span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 反转单链表</span></span><br><span class="line"><span class="comment">  * new一个新的头节点，将原来的链表上的节点一个一个取下，按头插法插入新的头节点后面</span></span><br><span class="line"><span class="comment">  * 最后把原来的头节点指向新的头节点的next域</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reserveSingleLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 链表为空或者只有一个节点，不用反转</span></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无须反转！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 要反转的节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="comment">// 记录当前要反转节点的下一个节点</span></span><br><span class="line">    ListNode next;</span><br><span class="line">    <span class="comment">// 定义一个新的头节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 反转前记录下当前节点的下一个节点位置</span></span><br><span class="line">        next = current.next;</span><br><span class="line">        <span class="comment">// 当前节点插入到新的头节点的后面</span></span><br><span class="line">        current.next = newHead.next;</span><br><span class="line">        <span class="comment">// 往后移动一个位置继续下一个节点的反转</span></span><br><span class="line">        newHead.next = current;</span><br><span class="line">        current = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原来的头节点指向新的头节点</span></span><br><span class="line">    head.next = newHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并两个有序单链表"><a href="#合并两个有序单链表" class="headerlink" title="合并两个有序单链表"></a>合并两个有序单链表</h3><p>如果两个链表都不为空，依次比较大小，将较小的一个节点插入到头结点的后面，如果只有一个链表不为空，直接插到链表最后面。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 合并两个有序链表</span></span><br><span class="line"><span class="comment">  * 如果两个链表都不为空，依次比较大小，将较小的一个节点插入到头结点的后面</span></span><br><span class="line"><span class="comment">  * 如果只有一个链表不为空，直接插到链表最后面</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> list 链表</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mergeSingleLinkedList</span><span class="params">(SingleLinkedList list)</span> &#123;</span><br><span class="line">    <span class="comment">// 指向当前链表的头结点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="comment">// 指向当前链表头节点的下一个节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="built_in">this</span>.head.next;</span><br><span class="line">    <span class="comment">// 指向第二个量表头节点的下一个节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p2</span> <span class="operator">=</span> list.head.next;</span><br><span class="line">    <span class="comment">// 两个链表都不为空</span></span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="literal">null</span> &amp;&amp; p2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 把id小的那个链表的节点挂在p后面</span></span><br><span class="line">        <span class="keyword">if</span> (p1.id &gt; p2.id) &#123;</span><br><span class="line">            p.next = p2;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.next = p1;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// p往后移动一个位置</span></span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 链表1多余的节点挂在p后面</span></span><br><span class="line">    <span class="keyword">if</span> (p1 != <span class="literal">null</span>) &#123;</span><br><span class="line">        p.next = p1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 链表2多余的节点挂在p后面</span></span><br><span class="line">    <span class="keyword">if</span> (p2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        p.next = p2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除倒数第k个结点"><a href="#删除倒数第k个结点" class="headerlink" title="删除倒数第k个结点"></a>删除倒数第k个结点</h3><p>倒数第 k 个结点是正数第 n-k+1 个结点，找到删除节点的前一个节点，将前一个节点指向要删除节点的下一个节点。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 删除倒数第k个元素</span></span><br><span class="line"><span class="comment">  * 倒数第k个节点是正数第n-k+1个节点</span></span><br><span class="line"><span class="comment">  * 找到删除节点的前一个节点，将前一个节点指向要删除节点的下一个节点</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> k 删除元素的倒数位置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteKFromLastNode</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="comment">// 指向头节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">// 指向头节点的下一个节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p2</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (p2 == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链表为空！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 倒数第k个节点的位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> singleLinkedListLength() - k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 记录当前节点的位置</span></span><br><span class="line">        position++;</span><br><span class="line">        <span class="comment">// 当前节点等于倒数第k个节点</span></span><br><span class="line">        <span class="keyword">if</span> (length == position) &#123;</span><br><span class="line">            <span class="comment">// 删除倒数第k个节点</span></span><br><span class="line">            p1.next = p2.next;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 往后移动继续寻找</span></span><br><span class="line">        p2 = p2.next;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里也可以用<strong>双指针</strong>实现，复杂度更低。</p><h3 id="获取单链表中间结点"><a href="#获取单链表中间结点" class="headerlink" title="获取单链表中间结点"></a>获取单链表中间结点</h3><p>使用双指针遍历，两个指针距离两个位置，当前面的指针到达链表尾部时，后面一个指针指向的位置就是中间节点的位置。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取单链表的中间节点</span></span><br><span class="line"><span class="comment">  * 使用双指针遍历，两个指针距离两个位置，当前面的指针到达链表尾部时，</span></span><br><span class="line"><span class="comment">  * 后面一个指针指向的位置就是中间节点的位置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMiddleNode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 第一个辅助变量寻找中间节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="comment">// 第二个辅助变量</span></span><br><span class="line">    ListNode p2;</span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链表为空！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p2 = p1.next;</span><br><span class="line">    <span class="keyword">if</span> (p2 == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;只有一个节点！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 前面指针的next不为空就继续遍历</span></span><br><span class="line">    <span class="keyword">while</span> (p2.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 后面的指针往后移动一个位置</span></span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        <span class="comment">// 如果前面一个指针的后面只有一个节点，则遍历结束</span></span><br><span class="line">        <span class="keyword">if</span> (p2.next.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 前面的指针移动两个位置</span></span><br><span class="line">        p2 = p2.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;链表的中间节点为&quot;</span> + p1.id + <span class="string">&quot;,名称为&quot;</span> + p1.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法-复杂度分析</title>
      <link href="/2021/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
      <url>/2021/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info flat"><p>我们都知道，设计数据结构和算法是为了让程序<strong>跑的更快、性能更好，同时能节省空间</strong>。所以算法的执行效率是一个非常重要的考量指标，一般这个指标我们可以通过分析<code>时间复杂度</code>和<code>空间复杂度</code>来衡量。</p></div><h2 id="为什么需要复杂度分析"><a href="#为什么需要复杂度分析" class="headerlink" title="为什么需要复杂度分析"></a>为什么需要复杂度分析</h2><p>代码写完后在机器上执行一遍，我们就能知道算法执行的时间和占用的内存，为什么还要做复杂度分析呢？因为这种方式测算的结果有非常大的局限性。</p><ol><li>测试结果依赖测试环境</li></ol><p>直接执行代码统计的结果很大程度上依赖于测试所使用的环境。同样一段代码，在十年前破旧的电脑上执行和现在最新，配置最高的电脑上执行，时间肯定是不一样的。都是最新的电脑，Intel 和 AMD 的处理器跑出来的结果也可能不一样。这样，程序的性能就受到了环境的影响，并不能准确的反映出程序的好坏。</p><ol start="2"><li>测试结果受数据规模的影响大</li></ol><p>测试数据规模的不同，测试的结果相差很大。测试数据规模太小，测试结果可能无法真实地反应算法的性能。</p><p>所以，我们需要一个方法，不用具体的数据测试就可以粗略的判断算法的执行效率。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>算法的执行效率，简单的说，就是<strong>代码执行的时间</strong>。在不执行代码的情况下，通过计算每一行<strong>代码执行的次数</strong>来估计代码的执行时间，这里我们假设每行代码执行的时间是相同的。</p><p>举个例子，先看下面这段代码的执行次数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">         sum += i;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二行执行了一次，第三行执行了 n 次，第四行和第五行执行了 n 的平方次，所以这段代码执行了 $2n^2$+n+1 次，代码执行的总时间是与 n 成正比的，我们可以用一个公式来表示：</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">T</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">f</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="number">2</span><span class="variable">n</span><span class="operator">^</span><span class="number">2</span><span class="operator">+</span><span class="variable">n</span><span class="operator">+</span><span class="number">1</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>当 n 足够大时，后面的整数可以忽略不计，由于是粗略的估计，所以我们只取表达式中最大的量级来表示代码的时间复杂度。上面的公式可以简写成：</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">T</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">n</span><span class="operator">^</span><span class="number">2</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>即我们可以说上面那段代码的时间复杂度为<code>O(n^2)</code>。</p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><h4 id="只关注循环最多次数的代码"><a href="#只关注循环最多次数的代码" class="headerlink" title="只关注循环最多次数的代码"></a>只关注循环最多次数的代码</h4><p>上面说了我们只取量级最大的代表时间复杂度。所以求算法的时间复杂度，<strong>最关键的就是计算出循环次数最多的那段代码执行的次数</strong>。</p><p>对于上面那段代码，我们只需要求出<code>sum += i;</code>这一行代码执行的次数，就可以计算出代码的时间复杂度。</p><h4 id="加法原则"><a href="#加法原则" class="headerlink" title="加法原则"></a>加法原则</h4><p>一个程序中有多个代码块时，总的复杂度等于<strong>量级最大的那段代码的复杂度</strong>，我们可以用公式表示：</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">T</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="variable">T1</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">+</span><span class="variable">T2</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">f</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">g</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">max</span><span class="punctuation">(</span><span class="variable">f</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">,</span><span class="variable">g</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>举个栗子，下面这段代码中的时间复杂度就是根据加法原则用最大量级的复杂度代表程序的复杂度。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        sum1 += i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum2 += i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            sum3 += j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum1+sum2+sum3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中三个代码块的时间复杂度分别是常量时间，O(n) 和 O($n^2$) 。根据前面说的，当 n 足够大时，常量和 O(n) 可以忽略不计，所有这段代码的时间复杂度为 O($n^2$) 。</p><h4 id="乘法原则"><a href="#乘法原则" class="headerlink" title="乘法原则"></a>乘法原则</h4><p>和加法原则类似，当代码中存在嵌套代码时，<strong>时间复杂度等于嵌套代码内外的复杂度乘积</strong>。用公式表示：</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">T</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="variable">T1</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">*</span><span class="variable">T2</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">f</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">*</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">g</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">f</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">*</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">g</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>这里也举个栗子，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        ret += add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先把 sum() 函数的求和语言看成一个普通的计算，sum() 的时间复杂度是 O(n)，然后再考虑调用 add() 函数，add() 函数的时间复杂度也是 O(n)，计算时需要把 add() 的时间复杂度考虑进去，所以这段代码的时间复杂度是 o($n^2$) 。</p><h4 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h4><ol><li>一般，我们常见的复杂度大小有 O(n)，O($n^2$)，O($log^n$)，O($nlog^n$)， O($2^n$)，O(n!) 等。它们的大小关系为：</li></ol><p><strong>O(1) &lt; O($log^n$) &lt; O(n) &lt; O($nlog^n$) &lt; O($n^2$) &lt; O($2^n$) &lt; O(n!) &lt; O($n^n$)</strong></p><ol start="2"><li>常见的时间复杂度有<strong>最好时间复杂度</strong>，<strong>最坏时间复杂度</strong>和<strong>平均时间复杂度</strong>。</li></ol><h3 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h3><p>空间复杂度和时间复杂度基本相同，是<strong>表示算法的存储空间与数据规模之间的增长关系</strong>。我们也可以用一个公式表示：</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">S</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">g</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多终端使用hexo发布博客</title>
      <link href="/2021/05/04/%E5%A4%9A%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/05/04/%E5%A4%9A%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note warning flat"><p>数据备份在现在这个互联网时代，是必必必…须要重视的事情。肉眼可见的设备坏了可以再换，数据丢了就再也找不回来了😤。</p></div><p>之前，我们只需要在本地部署了 hexo 博客，然后就可以写博客推送到码云，这样别人就可以通过外网来访问我们的博客了。但是如果我们部署 hexo 的电脑坏了或者想在其他电脑上写博客，这样就不能比较麻烦了。</p><p>我们可以将本地的 hexo 的相关源文件上传到另外一个仓库，这样在不同的电脑上，只要拉取这个仓库的文件，然后再安装相关插件就可以进行多终端写博客了。</p><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>在<a href="https://gitee.com/">码云</a>上新建一个<strong>私有</strong>仓库，存放 hexo 的主题，博客和其他源文件。这里仓库<strong>一定要建私有的</strong>，因为我们部署的源文件中有一些信息是我们的私密信息。</p><h2 id="推送到私有仓库"><a href="#推送到私有仓库" class="headerlink" title="推送到私有仓库"></a>推送到私有仓库</h2><p>在 hexo 根目录打开<code>git bash</code></p><h3 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h3 id="添加到本地仓库"><a href="#添加到本地仓库" class="headerlink" title="添加到本地仓库"></a>添加到本地仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;backup source file.&quot;</span><br></pre></td></tr></table></figure><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push --set-upstream git@gitee.com:ximingze/xxx.git master</span><br></pre></td></tr></table></figure><h2 id="在其他终端写博客"><a href="#在其他终端写博客" class="headerlink" title="在其他终端写博客"></a>在其他终端写博客</h2><h3 id="拉取远程仓库文件"><a href="#拉取远程仓库文件" class="headerlink" title="拉取远程仓库文件"></a>拉取远程仓库文件</h3><p>新建一个文件夹，打开<code>git bash</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@gitee.com:ximingze/xxx.git</span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在<code>git bash</code>中依次安装插件，不需要执行<code>hexo init</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>新建博客文件，编写博客，完成之后发布即可。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitee </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本自动登录telnet</title>
      <link href="/2020/12/25/shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95telnet/"/>
      <url>/2020/12/25/shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95telnet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info flat"><p>公司项目采用C程序开发，有些设置需要登录到<code>telnet</code>上面去操作，但是现场部署上线之后，有一百多台虚机，如果全部手动去操作，太麻烦了🙃…使用 shell 写个脚本，就可以自动去登录操作了。</p></div><p>登录不同的主机，可以有两种方式，一种把 IP 地址放在<strong>字符串</strong>中，另外一种放在文件中。</p><h2 id="读取字符串方式"><a href="#读取字符串方式" class="headerlink" title="读取字符串方式"></a>读取字符串方式</h2><p>把 IP 地址放在字符串中，这种适合 IP 地址少的，如果 IP 地址太多，写代码的时候比较麻烦。</p><h3 id="配置-IP-和-PORT"><a href="#配置-IP-和-PORT" class="headerlink" title="配置 IP 和 PORT"></a>配置 IP 和 PORT</h3><ul><li>字符串之间用空格隔开</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hosts=(&quot;192.168.1.48&quot; &quot;192.168.1.49&quot; &quot;192.168.1.50&quot; &quot;192.168.1.51&quot; &quot;192.168.1.52&quot;)</span><br><span class="line">port=(&quot;12041&quot; &quot;12042&quot; &quot;12043&quot; &quot;12044&quot; &quot;12045&quot;)</span><br></pre></td></tr></table></figure><h3 id="循环登录"><a href="#循环登录" class="headerlink" title="循环登录"></a>循环登录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for (( i=0;i&lt;$&#123;#hosts[*]&#125;; i++))</span><br><span class="line">do</span><br><span class="line">    (</span><br><span class="line">    sleep 1</span><br><span class="line">    echo -e &quot;$&#123;username&#125;\r\n&quot;</span><br><span class="line">    sleep 1</span><br><span class="line">    echo -e &quot;$&#123;password&#125;\r\n&quot;</span><br><span class="line">    sleep 1</span><br><span class="line">    # 这里可以进行登录之后的操作</span><br><span class="line">    sleep 1</span><br><span class="line">    echo -e &quot;exit\r\n&quot;</span><br><span class="line">    )|timeout 10  telnet $&#123;hosts[$i]&#125; $&#123;port[$i]&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="读取文件方式"><a href="#读取文件方式" class="headerlink" title="读取文件方式"></a>读取文件方式</h2><p>如果要登录的服务器太多，最好是把 IP 都放入一个文件中，每行一个 IP 和 PORT，然后读取文件。</p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><ul><li>hosts.txt</li></ul><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">192.168.1.48,12041</span><br><span class="line">192.168.1.49,12042</span><br></pre></td></tr></table></figure><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for ips in $hosts</span><br><span class="line">do</span><br><span class="line">    (</span><br><span class="line">    echo -e &quot;$&#123;username&#125;\r\n&quot;</span><br><span class="line">    echo -e &quot;$&#123;password&#125;\r\n&quot;</span><br><span class="line">    echo -e &quot;:display-icp-state;\r\n&quot;</span><br><span class="line">    sleep 1</span><br><span class="line">    echo -e &quot;exit\r\n&quot;</span><br><span class="line">    ) | telnet $&#123;ips%,*&#125; $&#123;ips#*,&#125;</span><br><span class="line">    # 截取，前面的部分</span><br><span class="line">    #echo $&#123;ips%,*&#125;</span><br><span class="line">    # 截取，后面的部分</span><br><span class="line">    #echo $&#123;ips#*,&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题配置—butterfly</title>
      <link href="/2020/11/29/hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E2%80%94butterfly/"/>
      <url>/2020/11/29/hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E2%80%94butterfly/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info flat"><p><code>hexo</code>默认的主题实在是不好看，好在有大量的开发者和爱好者开发了很多的主题，非常感谢他们😁，这样我们就可以选择自己喜欢的主题进行部署配置了。官方教程请参考<a href="https://butterfly.js.org/">主题开发者博客</a>。</p><p>本配置基于butterfly主题3.7.1版本。</p></div><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><ul><li>在<code>hexo</code>的根目录下，右键<code>git bash here</code>，直接克隆主题</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><ul><li>在<code>_config.yml</code>文件中修改主题名称</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ul><li>如果系统没有<code>pug</code>和<code>stylus</code>渲染器，需要安装</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="配置升级"><a href="#配置升级" class="headerlink" title="配置升级"></a>配置升级</h3><ul><li>butterfly 主题需要将该主题目录下的<code>butterfly.yml</code>复制到<code>hexo</code>安装的<strong>根目录</strong>，改名为<code>_config.butterfly.yml</code></li></ul><p>主题的配置全部都在<code>_config.butterfly.yml</code>配置文件中修改，hexo 会自动合并<code>config.yml</code>和<code>_config.butterfly.yml</code>里的配置，如果存在同名的配置，会优先使用<code>_config.butterfly.yml</code>里的配置。</p><h2 id="分页设置"><a href="#分页设置" class="headerlink" title="分页设置"></a>分页设置</h2><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><ul><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page tags</code>，会在<code>source</code>目录下生成<code>tags/index.md</code>文件，修改文件</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2020-11-23 21:56:15</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><ul><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page categories，会在</code>source<code>目录下生成</code>categories&#x2F;index.md&#96;文件，修改文件</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2020-11-23 21:58:54</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><h3 id="说说页"><a href="#说说页" class="headerlink" title="说说页"></a>说说页</h3><h4 id="创建说说页面"><a href="#创建说说页面" class="headerlink" title="创建说说页面"></a>创建说说页面</h4><ul><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page talking</code>，会在<code>source</code>目录下生成<code>talking/index.md</code>文件，修改文件</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 说说</span><br><span class="line">date: 2020-11-29 14:35:28</span><br><span class="line">type: artitalk</span><br><span class="line">top<span class="emphasis">_img: http://pic1.win4000.com/wallpaper/2020-11-10/5faa3d45a8aba.jpg</span></span><br></pre></td></tr></table></figure><h4 id="配置说说插件"><a href="#配置说说插件" class="headerlink" title="配置说说插件"></a>配置说说插件</h4><p>🍁 后续补充</p><h3 id="图库页"><a href="#图库页" class="headerlink" title="图库页"></a>图库页</h3><h4 id="创建图库页面"><a href="#创建图库页面" class="headerlink" title="创建图库页面"></a>创建图库页面</h4><ul><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page photo</code>，会在<code>source</code>目录下生成<code>photo/index.md</code>文件，修改文件</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 图片</span><br><span class="line">date: 2020-12-05 15:56:12</span><br><span class="line">type: &quot;photo&quot;</span><br><span class="line">top<span class="emphasis">_img: http://pic1.win4000.com/m00/9a/b2/5dc1a89ef0addc329fd8872dc2abf988.jpg</span></span><br></pre></td></tr></table></figure><h4 id="配置页面"><a href="#配置页面" class="headerlink" title="配置页面"></a>配置页面</h4><ul><li>使用<code>外挂标签</code>在<code>index.md</code>文件中配置图库页面，外挂标签需要在主题中配置</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>图库名称</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应的子相册地址</td></tr><tr><td>url</td><td>图库封面图片地址</td></tr></tbody></table><p>比如我的图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src='http://p5.qhimg.com/bdm/480_296_0/t0187398ac9bc36c05e.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁纸</div>  <p>收藏的一些壁纸</p>  <a href='/photo/wallpaper'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src='http://pic1.win4000.com/m00/10/62/8a3376a805c0249140f0039c390ce41d.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">动漫</div>  <p>卡哇伊</p>  <a href='/photo/kawai'></a>  </figcaption>  </figure>  </div>#### 子页面配置<ol><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page xxx</code>，会在<code>source</code>目录下生成<code>xxx/index.md</code>文件</li><li>把生成的 xxx 目录放入到 <strong>photo</strong> 目录下，修改 xxx 目录下的 <strong>index.md</strong> 文件</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: wallpaper</span><br><span class="line">date: 2020-12-05 19:16:07</span><br><span class="line">type: &quot;photo&quot;</span><br><span class="line">top<span class="emphasis">_img: http://pic1.win4000.com/m00/ef/f1/60aacd27946d77ac607da4e9916daf89.jpg</span></span><br></pre></td></tr></table></figure><ol><li>使用外挂标签，放入你想放入的图片地址</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">图片地址</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><h3 id="音乐页"><a href="#音乐页" class="headerlink" title="音乐页"></a>音乐页</h3><h4 id="开启音乐插件"><a href="#开启音乐插件" class="headerlink" title="开启音乐插件"></a>开启音乐插件</h4><p>在主题的配置文件中，<code>enable</code>设为<code>true</code>和<code>per_page</code>设为<code>true</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="插入Aplayer-html"><a href="#插入Aplayer-html" class="headerlink" title="插入Aplayer html"></a>插入Aplayer html</h4><p>把<code>aplayer代码</code>插入到主题配置文件的<code>inject.bottom</code>去。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;5436134451&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-listFolded=&quot;false&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;true&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h4 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><h4 id="依赖要求"><a href="#依赖要求" class="headerlink" title="依赖要求"></a>依赖要求</h4><p>如果无法正常显示播放器，可能是<code>js</code>文件版本过低</p><ol><li>APlayer.js &gt; 1.8.0</li><li>Meting.js &gt; 1.1.1</li></ol><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><ul><li>在<code>_config.yml</code>文件中配置 <code>aplayer</code></li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="创建音乐页面"><a href="#创建音乐页面" class="headerlink" title="创建音乐页面"></a>创建音乐页面</h4><ul><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page music</code>，会在<code>source</code>目录下生成<code>music/index.md</code>文件，修改文件</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 音乐</span><br><span class="line">date: 2020-12-10 22:02:49</span><br><span class="line">type: &quot;music&quot;</span><br></pre></td></tr></table></figure><h4 id="添加歌单"><a href="#添加歌单" class="headerlink" title="添加歌单"></a>添加歌单</h4><ul><li>以外挂标签的方式在<code>music/index.md</code>文件中添加歌单</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% meting &quot;84718802&quot; &quot;netease&quot; &quot;playlist&quot; &quot;volume:0.5&quot; &quot;theme:#49A6F9&quot; &quot;mutex:true&quot; %&#125;</span><br></pre></td></tr></table></figure><ul><li>歌单参数列表</li></ul><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>必须值</td><td>歌曲 id &#x2F; 播放列表 id &#x2F; 相册 id &#x2F; 搜索关键字</td></tr><tr><td>server</td><td>必须值</td><td>音乐平台: <code>netease</code>, <code>tencent</code>,<code>kugou</code>,<code>xiami</code>,<code>baidu</code></td></tr><tr><td>type</td><td>必须值</td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table><h3 id="豆瓣页"><a href="#豆瓣页" class="headerlink" title="豆瓣页"></a>豆瓣页</h3><p>豆瓣页面，主要展示个人豆瓣读书，观影和游戏清单，详细参考<a href="https://github.com/mythsman/hexo-douban">hexo-douban 官网</a></p><h4 id="安装插件-2"><a href="#安装插件-2" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><ul><li>在<code>_config.yml</code>中配置以下内容</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">douban:</span><br><span class="line">  user: mythsman</span><br><span class="line">  builtin: false</span><br><span class="line">  book:</span><br><span class="line"><span class="code">    title: &#x27;This is my book title&#x27;</span></span><br><span class="line"><span class="code">    quote: &#x27;This is my book quote&#x27;</span></span><br><span class="line"><span class="code">  movie:</span></span><br><span class="line"><span class="code">    title: &#x27;This is my movie title&#x27;</span></span><br><span class="line"><span class="code">    quote: &#x27;This is my movie quote&#x27;</span></span><br><span class="line"><span class="code">  game:</span></span><br><span class="line"><span class="code">    title: &#x27;This is my game title&#x27;</span></span><br><span class="line"><span class="code">    quote: &#x27;This is my game quote&#x27;</span></span><br><span class="line"><span class="code">  timeout: 10000 </span></span><br></pre></td></tr></table></figure><ol><li><strong>user</strong>: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”<a href="https://www.douban.com/people/xxxxxx/">https://www.douban.com/people/xxxxxx/</a>“ ，其中的”xxxxxx”就是你的个人ID了</li><li><strong>builtin</strong>: 是否将生成页面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默认是<code>false</code>,另一可选项为<code>true</code></li><li><strong>title</strong>: 该页面的标题</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法</li><li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点</li></ol><h4 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h4><ul><li>使用<code>hexo douban</code>命令即可生成指定页面，如果不加参数，那么默认参数为<code>-bgm</code></li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">hexo douban -h</span><br><span class="line">Usage: hexo douban</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">Generate pages from douban</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -b, --books   Generate douban books only</span><br><span class="line">  -g, --games   Generate douban games only</span><br><span class="line">  -m, --movies  Generate douban movies only</span><br></pre></td></tr></table></figure><p>安装了<code>hexo douban</code>之后，就不能用<code>hexo d</code>发布推送了，因为<code>hexo douban</code>跟<code>hexo deploy</code>的前缀都是<code>hexo d</code></p><h4 id="菜单配置"><a href="#菜单配置" class="headerlink" title="菜单配置"></a>菜单配置</h4><ul><li><code>_config.butterfly.yml</code>文件中配置菜单</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line"><span class="code">    书单: /book/ || fas fa-book</span></span><br><span class="line"><span class="code">    电影: /movie/ || fas fa-video</span></span><br></pre></td></tr></table></figure><h3 id="友情链接页"><a href="#友情链接页" class="headerlink" title="友情链接页"></a>友情链接页</h3><h4 id="创建友情链接页"><a href="#创建友情链接页" class="headerlink" title="创建友情链接页"></a>创建友情链接页</h4><ul><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page link</code>，会在<code>source</code>目录下生成<code>link/index.md</code>文件，修改文件</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 友情链接</span><br><span class="line">date: 2020-11-23 21:59:47</span><br><span class="line">type: &quot;link&quot;</span><br></pre></td></tr></table></figure><h4 id="友情链接添加"><a href="#友情链接添加" class="headerlink" title="友情链接添加"></a>友情链接添加</h4><ul><li>在 hexo 的<code>source/_data</code>目录中，创建一个文件<code>link.yml</code></li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> class<span class="emphasis">_name: 友情链接</span></span><br><span class="line"><span class="emphasis">  class_</span>desc: 那些人，那些事</span><br><span class="line">  link<span class="emphasis">_list:</span></span><br><span class="line"><span class="emphasis">    - name: laughing</span></span><br><span class="line"><span class="emphasis">      link: https://ximingze.gitee.io</span></span><br><span class="line"><span class="emphasis">      avatar: https://jerryc.me/image/avatar.png</span></span><br><span class="line"><span class="emphasis">      descr: 今日事,今日毕</span></span><br><span class="line"><span class="emphasis">    - name: Hexo</span></span><br><span class="line"><span class="emphasis">      link: https://hexo.io/zh-tw/</span></span><br><span class="line"><span class="emphasis">      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line"><span class="emphasis">      descr: 快速、简单且强大的网誌框架</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- class_</span>name: 网站</span><br><span class="line">  class<span class="emphasis">_desc: 值得推荐的网站</span></span><br><span class="line"><span class="emphasis">  link_</span>list:</span><br><span class="line"><span class="bullet">    -</span> name: Youtube</span><br><span class="line"><span class="code">      link: https://www.youtube.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line"><span class="code">      descr: 视频网站</span></span><br><span class="line"><span class="code">    - name: Weibo</span></span><br><span class="line"><span class="code">      link: https://www.weibo.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line"><span class="code">      descr: 中国最大社交分享平台</span></span><br><span class="line"><span class="code">    - name: Twitter</span></span><br><span class="line"><span class="code">      link: https://twitter.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line"><span class="code">      descr: 社交分享平台</span></span><br></pre></td></tr></table></figure><h4 id="友情链接页面设置"><a href="#友情链接页面设置" class="headerlink" title="友情链接页面设置"></a>友情链接页面设置</h4><ol><li><code>class_name</code>和<code>class_desc</code>支持<code>html</code>格式书写，如不需要，也可以留空。</li><li>友情链接界面可以由用户自己自定义，只需要在友情链接的 md 文档设置就行，以普通的 <strong>Markdown 格式</strong>书写。</li></ol><h3 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h3><ul><li>主题中内置了 404 页面，直接开启即可</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># A simple 404 page</span></span><br><span class="line">error<span class="emphasis">_404:</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  subtitle: &quot;页面没有找到&quot;</span></span><br><span class="line"><span class="emphasis">  background: </span></span><br></pre></td></tr></table></figure><h3 id="搜索页"><a href="#搜索页" class="headerlink" title="搜索页"></a>搜索页</h3><h4 id="安装本地搜索插件"><a href="#安装本地搜索插件" class="headerlink" title="安装本地搜索插件"></a>安装本地搜索插件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h4 id="修改搜索配置"><a href="#修改搜索配置" class="headerlink" title="修改搜索配置"></a>修改搜索配置</h4><ul><li>在<code>_config.butterfly.yml</code>文件中开放搜索配置</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">  <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">  <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="comment"># 如果没有查到内容相关内容显示</span></span><br></pre></td></tr></table></figure><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>修改站点配置文件 <code>_config.yml</code>，默认是英语。本主题支持 en，zh-CN，zh-TW。</p><h3 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h3><p>网站各种资料信息，例如标题、副标题和邮箱等个人资料，在博客根目录的<code>_config.yml</code>文件中修改。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">恰似你的温柔</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;往事已成空，还如一梦中&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;千山暮雪，只影向谁去&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">&#x27;互联网，开发，java，linux&#x27;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">laughing</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h3><p>修改主题配置文件<code>_config.butterfly.yml</code>，必须是 <code>/xxx/</code>，后面<code>||</code>分开，然后写图标名。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">说说:</span> <span class="string">/talking/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-comments</span></span><br><span class="line">  <span class="string">图片:</span> <span class="string">/photo/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-images</span></span><br><span class="line">  <span class="string">娱乐||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="string">视频:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><div class="tabs" id="code"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code-1"><i class="fas fa-check-circle"></i>默认主题</button></li><li class="tab"><button type="button" data-href="#code-2"><i class="fas fa-cog"></i>自定义主题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code-1"><p><code>Butterfly</code> 支持6种代码高亮样式：</p><ul><li>darker</li><li>pale night</li><li>light</li><li>ocean</li><li>mac</li><li>mac light</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code-2"><p>主题从3.0开始，支持使用自定义的代码顔色。</p><p>如何自定义主题，请查看下面这篇文章。</p><p><a href="https://butterfly.js.org/posts/b37b5fe3/">自定義代碼配色 | Butterfly</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>修改主题配置文件<code>_config.butterfly.yml</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure><h4 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h4><p>修改主题配置文件<code>_config.butterfly.yml</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="代码块开闭"><a href="#代码块开闭" class="headerlink" title="代码块开闭"></a>代码块开闭</h4><p>在默认情况下，代码框自动展开，可设置是否所有代码框都关闭状态，点击<code>&gt;</code>可展开代码。</p><ul><li>true 全部代码框不展开，需点击<code>&gt;</code>打开</li><li>false 代码狂展开，有<code>&gt;</code>点击按钮</li><li>none 不显示<code>&gt;</code>按钮</li></ul><p>修改主题配置文件<code>_config.butterfly.yml</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span> <span class="comment">#代码框不展开，需点击 &#x27;&gt;&#x27; 打开</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>你也可以在post&#x2F;page页对应的markdown文件front-matter添加highlight_shrink来独立配置。</p><p>当<strong>主题配置文件中</strong>的 <code>highlight_shrink</code> 设为true时，可在front-matter添加<code>highlight_shrink: false</code>来单独配置文章展开代码框。</p><p>当<strong>主题配置文件中</strong>的 <code>highlight_shrink</code> 设为false时，可在front-matter添加<code>highlight_shrink: true</code>来单独配置文章收缩代码框。</p></div><h4 id="代码换行"><a href="#代码换行" class="headerlink" title="代码换行"></a>代码换行</h4><p>在默认情况下，Hexo 在编译的时候不会实现代码自动换行。如果你不希望在代码块的区域里有横向滚动条的话，那么你可以考虑开启这个功能。</p><p>修改主题配置文件<code>_config.butterfly.yml</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果你是使用 highlight 渲染，需要找到你站点的 Hexo 配置文件<code>_config.yml</code>，将<code>line_number</code>改成<code>false</code>:</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- 改这里</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure><p>如果你是使用 prismjs 渲染，需要找到你站点的 Hexo 配置文件<code>_config.yml</code>，将<code>line_number</code>改成<code>false</code>:</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- 改这里</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="代码高度限制"><a href="#代码高度限制" class="headerlink" title="代码高度限制"></a>代码高度限制</h4><p>可配置代码高度限制，超出的部分会隐藏，并显示展开按钮。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_height_limit:</span> <span class="literal">false</span> <span class="comment"># unit: px</span></span><br></pre></td></tr></table></figure><div class="note info flat"><ol><li>单位是 <code>px</code>，直接添加数字，如 200</li><li>实际限制高度为 <code>highlight_height_limit + 30 px</code> ，多增加 30px 限制，目的是避免代码高度只超出highlight_height_limit 一点时，出现展开按钮，展开没内容。</li><li>不适用于隐藏后的代码块（ css 设置 display: none）</li></ol></div><h3 id="社交图片"><a href="#社交图片" class="headerlink" title="社交图片"></a>社交图片</h3><p>书写格式 <code>图标名：url || 描述性文字</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/xxxxx</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:xxxxxx@gmail.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure><p>🍁 后续补充</p><h2 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h2><p>如何新建博客，在 <a href="https://ximingze.gitee.io/2020/11/22/%E7%A0%81%E4%BA%91gitee%E9%83%A8%E7%BD%B2hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">码云gitee部署hexo个人博客</a> 这篇博客中已经说明…</p><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><p>博客除了有正文之外，还有其他的一些设置，需要在博客的<code>md</code>文件的头部以<code>---</code>分割的区域进行配置，有两种设置可以选择：<code>Page Front-matter</code>和<code>Post Front-matter</code>。根据参数自己配置即可。</p><ul><li>Page Front-matter</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和cs</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><ul><li>Post Front-matter</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">aside:</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><h3 id="博客加密"><a href="#博客加密" class="headerlink" title="博客加密"></a>博客加密</h3><h4 id="安装插件-3"><a href="#安装插件-3" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><h4 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h4><ul><li>在<code>_config.yml</code>文件中配置加密配置</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安全</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="comment"># hexo-blog-encrypt</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">这里有东西被加密了，需要输入密码查看哦。</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">抱歉,</span> <span class="string">这里需要输入密码才能阅读哦~</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码A</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码B</span>&#125;</span><br><span class="line">  <span class="attr">template:</span> <span class="string">&lt;div</span> <span class="string">id=&quot;hexo-blog-encrypt&quot;</span> <span class="string">data-wpm=&quot;&#123;&#123;hbeWrongPassMessage&#125;&#125;&quot;</span> <span class="string">data-whm=&quot;&#123;&#123;hbeWrongHashMessage&#125;&#125;&quot;&gt;&lt;div</span> <span class="string">class=&quot;hbe-input-container&quot;&gt;&lt;input</span> <span class="string">type=&quot;password&quot;</span> <span class="string">id=&quot;hbePass&quot;</span> <span class="string">placeholder=&quot;&#123;&#123;hbeMessage&#125;&#125;&quot;</span> <span class="string">/&gt;&lt;label&gt;&#123;&#123;hbeMessage&#125;&#125;&lt;/label&gt;&lt;div</span> <span class="string">class=&quot;bottom-line&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script</span> <span class="string">id=&quot;hbeData&quot;</span> <span class="string">type=&quot;hbeData&quot;</span> <span class="string">data-hmacdigest=&quot;&#123;&#123;hbeHmacDigest&#125;&#125;&quot;&gt;&#123;&#123;hbeEncryptedData&#125;&#125;&lt;/script&gt;&lt;/div&gt;</span></span><br><span class="line">  <span class="attr">wrong_pass_message:</span> <span class="string">哦豁,</span> <span class="string">这个密码看着不太对呢,</span> <span class="string">请联系博主再试试吧~</span></span><br><span class="line">  <span class="attr">wrong_hash_message:</span> <span class="string">抱歉,</span> <span class="string">这个文章不能被校验,</span> <span class="string">不过您还是能看看解密后的内容.</span></span><br></pre></td></tr></table></figure><ul><li>在要加密的博客头部区域配置加密选项</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> 加密文章tag</span><br><span class="line">password: xxx</span><br><span class="line">abstract: 这里有东西被加密了，需要输入密码查看哦。</span><br><span class="line">message: 抱歉, 这里需要输入密码才能阅读哦~</span><br><span class="line">wrong<span class="emphasis">_pass_</span>message: 哦豁, 这个密码看着不太对呢, 请联系博主再试试吧~</span><br><span class="line">wrong<span class="emphasis">_hash_</span>message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span><br></pre></td></tr></table></figure><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><h5 id="插件方式"><a href="#插件方式" class="headerlink" title="插件方式"></a>插件方式</h5><ul><li>插入网络图片直接按照<code>markdown</code>语法格式插入即可，插入本地图片需要<strong>安装插件</strong></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure><ul><li>修改<code>_config.yml</code>文件<code>post_asset_folder</code>值为<code>true</code></li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">post_asset_folder:true</span></span><br></pre></td></tr></table></figure><p>修改为<code>true</code>之后，用命令创建博客文件时，会在同目录下生成一个跟博客同名的文件夹，博客中要插入的本地问题都存放在该文件夹中。详细说明参考<a href="https://hexo.io/zh-cn/docs">hexo官方说明文档</a> 。</p><ul><li>插入图片使用的格式不是插入在线图片的格式</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img 图片名称 图片描述 %&#125;</span><br></pre></td></tr></table></figure><h5 id="本地方式"><a href="#本地方式" class="headerlink" title="本地方式"></a>本地方式</h5><p>在主题的 <strong>source</strong> 目录下新建一个文件夹，专门用来放写博客的图片。部署之后，在 public 目录下会生成之前放的图片，博客中的图片地址写 public 中图片路径（&#x2F;postimg&#x2F;hello&#x2F;xxx.jpg），在外网中就可以直接看到图片，public 路径下的文件会传到 gitee。</p><p>🚀 未完，有空补充…😂</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>码云gitee部署hexo个人博客</title>
      <link href="/2018/11/22/%E7%A0%81%E4%BA%91gitee%E9%83%A8%E7%BD%B2hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/11/22/%E7%A0%81%E4%BA%91gitee%E9%83%A8%E7%BD%B2hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info flat"><p><code>Hexo</code>搭建个人博客部署到<code>码云gitee</code>是非常方便的，而且访问速度很快，之前在<code>github</code>上部署过，但是国内访问响应速度太慢。</p></div><h2 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h2><p>搭建<code>hexo</code>博客之前，需要先安装所需要的依赖工具：<code>Node.js</code>和<code>Git</code></p><h3 id="node-js-安装"><a href="#node-js-安装" class="headerlink" title="node.js 安装"></a>node.js 安装</h3><p>在<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">node.js 官网</a> 下载最新稳定版本的 node.js 文件，然后双击安装</p><h3 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h3><p>在 <a href="https://git-scm.com/download/win">git 官网</a> 下载最新稳定版本的 git 文件，然后双击安装</p><h2 id="安装部署-hexo"><a href="#安装部署-hexo" class="headerlink" title="安装部署 hexo"></a>安装部署 hexo</h2><h3 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li>新建一个文件夹存放用来存放<code>hexo</code>配置，然后单击鼠标右键，选择<code>git bash here</code></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><ul><li>在<code>git bash</code>中输入命令初始化<code>hexo</code>，路径为存放<code>hexo</code>的路径</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h3><p>安装完成后，先在本地测试是否安装成功</p><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h4 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h4><ul><li>在浏览器中访问<a href="localhost:4000">localhost:4000</a> ,如果能看到默认的页面就部署成功了</li></ul><p><img src="/postimg/%E7%A0%81%E4%BA%91gitee%E9%83%A8%E7%BD%B2hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hello-world.png" alt="hello world"></p><h2 id="部署博客到码云gitee"><a href="#部署博客到码云gitee" class="headerlink" title="部署博客到码云gitee"></a>部署博客到码云gitee</h2><p><code>gitee</code>是国内的网站，无论是自己编写博客提交的响应，还是访问博客的速度都非常快，而<code>github</code>是国外的网站，所以访问速度会很慢，有时候还加载不出来，所以我选择部署到<code>gitee</code>。</p><h3 id="新建博客项目"><a href="#新建博客项目" class="headerlink" title="新建博客项目"></a>新建博客项目</h3><ul><li>博客项目名称要和码云的用户名相同</li></ul><p><img src="/postimg/%E7%A0%81%E4%BA%91gitee%E9%83%A8%E7%BD%B2hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ximingze.png" alt="新建仓库"></p><h3 id="关联项目到-hexo"><a href="#关联项目到-hexo" class="headerlink" title="关联项目到 hexo"></a>关联项目到 hexo</h3><ul><li>复制项目的<code>https</code>地址，配置到<code>hexo</code>根目录下的<code>_config.yml</code>文件中</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gitee.com/ximingze/ximingze.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="关联码云帐号到-git"><a href="#关联码云帐号到-git" class="headerlink" title="关联码云帐号到 git"></a>关联码云帐号到 git</h3><ol><li>在<code>hexo</code>根目录点击鼠标右键，选择<code>git bash here</code></li><li>配置<code>gitee</code>帐号</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;码云帐号&quot;</span><br><span class="line">git config --global user.email &quot;码云邮箱&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>hexo</code>根目录初始化 git</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="部署-hexo-到码云"><a href="#部署-hexo-到码云" class="headerlink" title="部署 hexo 到码云"></a>部署 hexo 到码云</h3><ol><li>安装部署插件</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="2"><li>部署 hexo</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><ol start="3"><li>输入<code>gitee</code>帐号密码</li></ol><h3 id="启用码云-page-服务"><a href="#启用码云-page-服务" class="headerlink" title="启用码云 page 服务"></a>启用码云 page 服务</h3><ul><li>在项目页面，点击服务，选择<code>Gitee Pages</code></li></ul><p><img src="/postimg/%E7%A0%81%E4%BA%91gitee%E9%83%A8%E7%BD%B2hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitee-pages.png" alt="Gitee Page"></p><ul><li>勾选强制使用<code>https</code>，点击更新</li></ul><h3 id="配置-SSH-公钥"><a href="#配置-SSH-公钥" class="headerlink" title="配置 SSH 公钥"></a>配置 SSH 公钥</h3><p><code>Gitee</code>提供了基于 SSH 协议的 Git 服务，在使用 SSH 协议访问仓库仓库之前，需要先配置好账户&#x2F;仓库的<code>SSH公钥</code></p><ol><li>生成 sshkey</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;</span><br></pre></td></tr></table></figure><p>这里的<code>xxxxx@xxxxx.com</code>只是生成的 sshkey 的名称，并不约束或要求具体命名为某个邮箱</p><p>按照提示完成三次回车，即可生成 ssh key</p><ol start="2"><li>添加 sshkey 到仓库中</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制生成后的 ssh key，通过仓库主页 <strong>「管理」-&gt;「部署公钥管理」-&gt;「添加部署公钥」</strong> ，添加生成的 public key 添加到仓库中</p><ol start="3"><li>验证是否添加成功</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T laughing@gitee.com</span><br></pre></td></tr></table></figure><p>首次使用需要确认并添加主机到本机SSH可信列表。若返回 <code>Hi XXX! You&#39;ve successfully authenticated, but Gitee.com does not provide shell access.</code> 内容，则证明添加成功。</p><h2 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h2><h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><ul><li>使用 hexo 命令生成一个 md 文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;title&quot;</span><br></pre></td></tr></table></figure><p>生成的文件在<code>/source/_posts</code>目录下，”title” 就是博客的名称</p><h3 id="编写博客-1"><a href="#编写博客-1" class="headerlink" title="编写博客"></a>编写博客</h3><p>博客正文的编写，按照<code>markdown</code>语法的格式编写即可，具体的一些细节请参考<a href="https://ximingze.gitee.io/2020/11/29/hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE-butterfly/">hexo主题配置—butterfly</a></p><h3 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h3><ol><li>清除缓存</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><ol start="2"><li>重新生成静态文件并发布到码云</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>码云的 gitee pages 服务<strong>不能自动更新</strong>，需要自己手动去更新，稍微有点麻烦，每次更新了博客之后，都要手动去码云上再更新一次 gitee pages 服务。</p><div class="note warning flat"><p>最近又把博客搬到了 github，因为码云每次发布博客都要自动更新 gitee pages，很麻烦；然后最近想要更新博客的时候发现，码云在弄什么绿色网络环境改造，三个月不能用 gitee pages，太蛋疼了。</p></div>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
